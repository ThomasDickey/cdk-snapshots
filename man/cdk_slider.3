'\" t
.\" $Id: cdk_slider.3,v 1.14 2003/12/11 01:27:17 tom Exp $"
.TH cdk_slider 3
.SH NAME
activateCDKSlider,
destroyCDKSlider,
drawCDKSlider,
eraseCDKSlider,
getCDKSliderBox,
getCDKSliderHighValue,
getCDKSliderLowValue,
getCDKSliderValue,
injectCDKSlider,
moveCDKSlider,
newCDKSlider,
positionCDKSlider,
setCDKSlider,
setCDKSliderBackgroundAttrib,
setCDKSliderBackgroundColor,
setCDKSliderBox,
setCDKSliderBoxAttribute,
setCDKSliderHorizontalChar,
setCDKSliderLLChar,
setCDKSliderLRChar,
setCDKSliderLowHigh,
setCDKSliderPostProcess,
setCDKSliderPreProcess,
setCDKSliderULChar,
setCDKSliderURChar,
setCDKSliderValue,
setCDKSliderVerticalChar \- curses slider widget
.SH SYNOPSIS
.LP
.B cc
.RI "[ " "flag" " \|.\|.\|. ] " "file" " \|.\|.\|."
.B \-lcdk
.RI "[ " "library" " \|.\|.\|. ]"
.LP
#include <cdk.h>
.nf
.TP 15
.B "int activateCDKSlider ("
.BI "CDKSLIDER *" "slider",
.BI "chtype *" "actions");
.TP 15
.B "void destroyCDKSlider ("
.BI "CDKSLIDER *" "slider");
.TP 15
.B "void drawCDKSlider ("
.BI "CDKSLIDER *" "slider",
.BI "boolean " "box");
.TP 15
.B "void eraseCDKSlider ("
.BI "CDKSLIDER *" "slider");
.TP 15
.B "boolean getCDKSliderBox ("
.BI "CDKSLIDER *" "slider");
.TP 15
.B "int getCDKSliderHighValue ("
.BI "CDKSLIDER *" "slider");
.TP 15
.B "int getCDKSliderLowValue ("
.BI "CDKSLIDER *" "slider");
.TP 15
.B "int getCDKSliderValue ("
.BI "CDKSLIDER *" "slider");
.TP 15
.B "int injectCDKSlider ("
.BI "CDKSLIDER *" "slider",
.BI "chtype " "input");
.TP 15
.B "void moveCDKSlider ("
.BI "CDKSLIDER *" "slider",
.BI "int " "xpos",
.BI "int " "ypos",
.BI "boolean " "relative",
.BI "boolean " "refresh");
.TP 15
.B "CDKSLIDER *newCDKSlider ("
.BI "CDKSCREEN *" "cdkscreen",
.BI "int " "xpos",
.BI "int " "ypos",
.BI "char *" "title",
.BI "char *" "label",
.BI "chtype " "fillerCharacter",
.BI "int " "fieldWidth",
.BI "int " "currentValue",
.BI "int " "lowValue",
.BI "int " "highValue",
.BI "int " "increment",
.BI "int " "fastIncrement",
.BI "boolean " "box",
.BI "boolean " "shadow");
.TP 15
.B "void positionCDKSlider ("
.BI "CDKSLIDER *" "slider");
.TP 15
.B "void setCDKSlider ("
.BI "CDKSLIDER *" "slider",
.BI "int " "lowValue",
.BI "int " "highValue",
.BI "int " "currentValue",
.BI "boolean " "box");
.TP 15
.B "void setCDKSliderBackgroundAttrib ("
.BI "CDKSLIDER *" "slider",
.BI "chtype " "attribute");
.TP 15
.B "void setCDKSliderBackgroundColor ("
.BI "CDKSLIDER *" "slider",
.BI "char * " "color");
.TP 15
.B "void setCDKSliderBox ("
.BI "CDKSLIDER *" "slider",
.BI "boolean " "boxWidget");
.TP 15
.B "void setCDKSliderBoxAttribute ("
.BI "CDKSLIDER *" "slider",
.BI "chtype " "character");
.TP 15
.B "void setCDKSliderHorizontalChar ("
.BI "CDKSLIDER *" "slider",
.BI "chtype " "character");
.TP 15
.B "void setCDKSliderLLChar ("
.BI "CDKSLIDER *" "slider",
.BI "chtype " "character");
.TP 15
.B "void setCDKSliderLRChar ("
.BI "CDKSLIDER *" "slider",
.BI "chtype " "character");
.TP 15
.B "void setCDKSliderLowHigh ("
.BI "CDKSLIDER *" "slider",
.BI "int " "lowValue",
.BI "int " "highValue");
.TP 15
.B "void setCDKSliderPostProcess ("
.BI "CDKSLIDER *" "slider",
.BI "PROCESSFN " "callback",
.BI "void * " "data");
.TP 15
.B "void setCDKSliderPreProcess ("
.BI "CDKSLIDER *" "slider",
.BI "PROCESSFN " "callback",
.BI "void * " "data");
.TP 15
.B "void setCDKSliderULChar ("
.BI "CDKSLIDER *" "slider",
.BI "chtype " "character");
.TP 15
.B "void setCDKSliderURChar ("
.BI "CDKSLIDER *" "slider",
.BI "chtype " "character");
.TP 15
.B "void setCDKSliderValue ("
.BI "CDKSLIDER *" "slider",
.BI "int " "value");
.TP 15
.B "void setCDKSliderVerticalChar ("
.BI "CDKSLIDER *" "slider",
.BI "chtype " "character");
.fi
.SH DESCRIPTION
The Cdk slider widget creates a visual slider box with a label and a slider field.
The following are functions which create or manipulate the Cdk slider
box widget.
.SH AVAILABLE FUNCTIONS
.TP 5
.B activateCDKSlider
activates the slider widget and lets the user interact with the widget.
The parameter \fBslider\fR is a pointer to a non-NULL slider widget.
If the \fBactions\fR parameter is passed with a non-NULL value, the characters
in the array will be injected into the widget.
To activate the widget
interactively pass in a \fINULL\fR pointer for \fBactions\fR.
If the character entered
into this widget is \fIRETURN\fR or \fITAB\fR then this function will return a
value from the low value to the high value.
It will also set the widget data \fIexitType\fR to \fIvNORMAL\fR.
If the character entered into this
widget was \fIESCAPE\fR then the widget will return a value of -1 and the
widget data \fIexitType\fR will be set to \fIvESCAPE_HIT\fR.
.TP 5
.B destroyCDKSlider
removes the widget from the screen and frees memory the object used.
.TP 5
.B drawCDKSlider
draws the slider widget on the screen.
If the \fBbox\fR option is true, the widget is drawn with a box.
.TP 5
.B eraseCDKSlider
removes the widget from the screen.
This does \fINOT\fR destroy the widget.
.TP 5
.B getCDKSliderBox
returns true if the widget will be drawn with a box around it.
.TP 5
.B getCDKSliderHighValue
returns the high value of the slider widget.
.TP 5
.B getCDKSliderLowValue
returns the low value of the slider widget.
.TP 5
.B getCDKSliderValue
returns the current value of the widget.
.TP 5
.B injectCDKSlider
injects a single character into the widget.
The parameter \fBslider\fR is a pointer to a non-NULL slider widget.
The parameter \fBcharacter\fR is the character to inject into the widget.
If the character
injected into this widget was \fIRETURN\fR then the character injected into
this widget is \fIRETURN\fR or \fITAB\fR then this function will return a
value from the low value to the high value.
It will also set the widget data \fIexitType\fR to \fIvNORMAL\fR.
If the character entered into this
widget was \fIESCAPE\fR then the widget will return a value of -1 and the
widget data \fIexitType\fR will be set to \fIvESCAPE_HIT\fR.
Any other
character injected into the widget will set the widget data
\fIexitType\fR to \fIvEARLY_EXIT\fR and the function will return -1.
.TP 5
.B moveCDKSlider
moves the given widget to the given position.
The parameters \fBxpos\fR and \fBypos\fR are the new position of the widget.
The parameter \fBxpos\fR may be an integer or one of the pre-defined values
\fITOP\fR, \fIBOTTOM\fR, and \fICENTER\fR.
The parameter \fBypos\fR may be an integer or one of the pre-defined values \fILEFT\fR,
\fIRIGHT\fR, and \fICENTER\fR.
The parameter \fBrelative\fR states whether
the \fBxpos\fR/\fBypos\fR pair is a relative move or an absolute move.
For example, if \fBxpos\fR = 1 and \fBypos\fR = 2 and \fBrelative\fR = \fBTRUE\fR,
then the widget would move one row down and two columns right.
If the value of \fBrelative\fR was \fBFALSE\fR then the widget would move to the position (1,2).
Do not use the values \fITOP\fR, \fIBOTTOM\fR, \fILEFT\fR,
\fIRIGHT\fR, or \fICENTER\fR when \fBrelative\fR = \fITRUE\fR.
(weird things may happen).
The final parameter \fBrefresh\fR is a boolean value which
states whether the widget will get refreshed after the move.
.TP 5
.B newCDKSlider
function creates a slider widget and returns a pointer to it..
The \fBscreen\fR parameter
is the screen you wish this widget to be placed in.
The parameter \fBxpos\fR
controls the placement of the object along the horizontal axis.
This parameter may be an integer or one of the pre-defined values
\fILEFT\fR, \fIRIGHT\fR, and \fICENTER\fR.
The parameter \fBypos\fR controls the placement
of the object along the vertical axis.
This parameter may be an integer or one of the pre-defined values
\fITOP\fR, \fIBOTTOM\fR, and \fICENTER\fR.
The \fBtitle\fR parameter is the string which will be displayed at the top of the widget.
The title can be more than one line; just provide a carriage return
character at the line break.
The \fBlabel\fR parameter is the string which will be
displayed in the label of the slider field.
The \fBfillerCharacter\fR is the
character to be used to draw the slider bar in the field.
The parameter \fBfieldWidth\fR controls the width of the widget.
If you provide a value
of zero the widget will be created with the full width of the screen.
If you provide a negative value, the widget will be created the full width
minus the value provided.
The parameter \fBcurrentValue\fR
is the value of the slider field when the widget is activated.
The parameters \fBlowValue\fR and \fBhighValue\fR are the low and high values of the widget respectively.
The parameter \fBincrement\fR is the regular increment value
while \fBfastIncrement\fR is the accelerated increment value.
The \fBbox\fR
parameter states whether the widget will be drawn with a box around it.
The \fBshadow\fR parameter accepts a boolean value to turn the shadow on or
off around this widget.
If the widget could not be created then a \fINULL\fR
pointer is returned.
.TP 5
.B positionCDKSlider
allows the user to move the widget around the screen via the cursor/keypad keys.
See \fBcdk_position (3)\fR for key bindings.
.TP 5
.B setCDKSlider
lets the programmer modify certain elements of an existing slider widget.
The parameter names correspond to the same parameter
names listed in the \fInewCDKSlider\fR function.
.TP 5
.B setCDKSliderBackgroundAttrib
sets the background attribute of the widget.
The parameter \fBattribute\fR is a curses attribute, e.g., A_BOLD.
.TP 5
.B setCDKSliderBackgroundColor
sets the background color of the widget.
The parameter \fBcolor\fR is in the format of the Cdk format strings.
See \fBcdk_display (3)\fR.
.TP 5
.B setCDKSliderBox
sets whether the widget will be drawn with a box around it.
.TP 5
.B setCDKSliderBoxAttribute
function sets the attribute of the box.
.TP 5
.B setCDKSliderHorizontalChar
sets the horizontal drawing character for the box to the given character.
.TP 5
.B setCDKSliderLLChar
sets the lower left hand corner of the widget's box to the given character.
.TP 5
.B setCDKSliderLRChar
sets the lower right hand corner of the widget's box to the given character.
.TP 5
.B setCDKSliderLowHigh
sets the low and high values of the widget.
.TP 5
.B setCDKSliderPostProcess
allows the user to have the widget call a function after the
key has been applied to the widget.
The parameter \fBfunction\fR is the callback function.
The parameter \fBdata\fR points to data passed to the callback function.
To learn more about post-processing see \fIcdk_process (3)\fR.
.TP 5
.B setCDKSliderPreProcess
allows the user to have the widget call a function after a key
is hit and before the key is applied to the widget.
The parameter \fBfunction\fR is the callback function.
The parameter \fBdata\fR points to data passed to the callback function.
To learn more about pre-processing see \fIcdk_process (3)\fR.
.TP 5
.B setCDKSliderULChar
sets the upper left hand corner of the widget's box to the given character.
.TP 5
.B setCDKSliderURChar
sets the upper right hand corner of the widget's box to the given character.
.TP 5
.B setCDKSliderValue
sets the current value of the widget.
.TP 5
.B setCDKSliderVerticalChar
sets the vertical drawing character for the box to the given character.
.SH KEY BINDINGS
When the widget is activated there are several default key bindings which will
help the user enter or manipulate the information quickly.
The following table
outlines the keys and their actions for this widget.
.LP
.TS
center tab(/) box;
l l
l l
lw15 lw35 .
\fBKey/Action\fR
=
Left Arrow/T{
Decrements the field by the normal decrement value.
T}
Down Arrow/T{
Decrements the field by the normal decrement value.
T}
d/T{
Decrements the field by the normal decrement value.
T}
-/T{
Decrements the field by the normal decrement value.
T}
Right Arrow/T{
Increments the field by the normal increment value.
T}
Up Arrow/T{
Increments the field by the normal increment value.
T}
u/T{
Increments the field by the normal increment value.
T}
+/T{
Increments the field by the normal increment value.
T}
Prev Page/T{
Decrements the field by the accelerated decrement value.
T}
U/T{
Decrements the field by the accelerated decrement value.
T}
Ctrl-B/T{
Decrements the field by the accelerated decrement value.
T}
Next Page/T{
Increments the field by the accelerated increment value.
T}
D/T{
Increments the field by the accelerated increment value.
T}
Ctrl-F/T{
Increments the field by the accelerated increment value.
T}
Home/Sets the value to the low value.
g/Sets the value to the low value.
0/Sets the value to the low value.
End/Sets the value to the high value.
G/Sets the value to the high value.
$/Sets the value to the high value.
Return/T{
Exits the widget and returns the
current value.
This also sets the widget data \fIexitType\fR to \fIvNORMAL\fR.
T}
Tab/T{
Exits the widget and returns the current value.
This also sets the widget data \fIexitType\fR to \fIvNORMAL\fR.
T}
Escape/T{
Exits the widget and returns -1.
This also sets the widget data \fIexitType\fR to \fIvESCAPE_HIT\fR.
T}
Ctrl-R/Refreshes the screen.
.TE
.SH SEE ALSO
.BR cdk (3),
.BR cdk_binding (3),
.BR cdk_display (3),
.BR cdk_position (3),
.BR cdk_screen (3)
