.de It
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH cdk_slider 3 "18 March 1997"
.SH NAME
newCDKSlider, activateCDKSlider, injectCDKSlider, setCDKSlider,
setCDKSliderLowHigh, getCDKSliderLowValue, getCDKSliderHighValue,
setCDKSliderBox, getCDKSliderBox,
setCDKSliderULChar, setCDKSliderURChar,
setCDKSliderLLChar, setCDKSliderLRChar,
setCDKSliderVerticalChar, setCDKSliderHorizontalChar,
setCDKSliderBoxAttribute,
setCDKSliderBackgroundColor,
drawCDKSlider, eraseCDKSlider, 
destroyCDKSlider, setCDKSliderPreProcess, setCDKSliderPostProcess
 \- Creates a managed curses slider widget.
.SH SYNOPSIS
.LP
.B cc
.RI "[ " "flag" " \|.\|.\|. ] " "file" " \|.\|.\|."
.B \-lcdk
.RI "[ " "library" " \|.\|.\|. ]"
.LP
#include <cdk.h>
.LP
.BI "CDKSLIDER *newCDKSlider (CDKSCREEN *" "cdkscreen",
.BI "int " "xpos",
.BI "int " "ypos",
.BI "char *" "title",
.BI "char *" "label",
.BI "chtype " "fillerCharacter",
.BI "int " "fieldWidth",
.BI "int " "currentValue",
.BI "int " "lowValue",
.BI "int " "highValue",
.BI "int " "increment",
.BI "int " "fastIncrement",
.BI "boolean " "box",
.BI "boolean " "shadow");
.LP
.BI "int activateCDKSlider (CDKSLIDER *" "slider",
.BI "chtype *" "actions");
.LP
.BI "int injectCDKSlider (CDKSLIDER *" "slider",
.BI "chtype " "input");
.LP
.BI "void setCDKSlider (CDKSLIDER *" "slider",
.BI "int " "lowValue",
.BI "int " "highValue",
.BI "int " "currentValue",
.BI "boolean " "box");
.LP
.BI "void setCDKSliderLowHigh (CDKSLIDER *" "slider",
.BI "int " "lowValue",
.BI "int " "highValue");
.LP
.BI "int getCDKSliderLowValue ((CDKSLIDER *" "slider");
.LP
.BI "int getCDKSliderHighValue ((CDKSLIDER *" "slider");
.LP
.BI "void setCDKSliderValue ((CDKSLIDER *" "slider",
.BI "int " "value");
.LP
.BI "int getCDKSliderValue ((CDKSLIDER *" "slider");
.LP
.BI "void setCDKSliderULChar (CDKSLIDER *", "slider",
.BI "chtype " "character");
.LP
.BI "void setCDKSliderURChar (CDKSLIDER *", "slider",
.BI "chtype " "character");
.LP
.BI "void setCDKSliderLLChar (CDKSLIDER *", "slider",
.BI "chtype " "character");
.LP
.BI "void setCDKSliderLRChar (CDKSLIDER *", "slider",
.BI "chtype " "character");
.LP
.BI "void setCDKSliderVerticalChar (CDKSLIDER *", "slider",
.BI "chtype " "character");
.LP
.BI "void setCDKSliderHorizontalChar (CDKSLIDER *", "slider",
.BI "chtype " "character");
.LP
.BI "void setCDKSliderBoxAttribute (CDKSLIDER *", "slider",
.BI "chtype " "character");
.LP
.BI "void setCDKSliderBackgroundColor (CDKSLIDER *", "slider",
.BI "char * " "color");
.LP
.BI "void moveCDKSlider (CDKSLIDER *" "slider",
.BI "int " "box",
.BI "int " "box",
.BI "boolean " "relative",
.BI "boolean " "refresh");
.LP
.BI "void positionCDKSlider (CDKSLIDER *" "slider");
.LP
.BI "void drawCDKSlider (CDKSLIDER *" "slider",
.BI "boolean " "box");
.LP
.BI "void eraseCDKSlider (CDKSLIDER *" "slider");
.LP
.BI "void destroyCDKSlider (CDKSLIDER *" "slider");
.LP
.BI "void setCDKSliderPreProcess (CDKSLIDER *" "slider",
.BI "PROCESSFN " "callback",
.BI "void * " "data");
.LP
.BI "void setCDKSliderPostProcess (CDKSLIDER *" "slider",
.BI "PROCESSFN " "callback",
.BI "void * " "data");
.LP
.BI "void bindCDKObject (EObjectType " "widgetType",
.BI "void *" "object",
.BI "chtype " "key",
.BI "BINDFN " "function",
.BI "void *" "data");
.SH DESCRIPTION
The Cdk slider widget creates a visual slider box with a label and a slider 
field. The following are functions which create or manipulate the Cdk slider 
box widget.

.SH AVAILABLE FUNCTIONS
CDKSLIDER *newCDKSlider (CDKSCREEN *\f2screen\f1, int \f2xpos\f1, int \f2ypos\f1, char *\f2title\f1, char *\f2label\f1, chtype \f2fillerCharacter\f1, chtype \f2fillerCharacter\f1, EDisplayType \f2displayType\f1, int \f2fieldWidth\f1, int \f2minimumLength\f1, int \f2maximumLength\f1, boolean \f2box\f1, boolean \f2shadow\f1);
.RS 3
This function creates a pointer to a slider widget. The \f2screen\f1 parameter
is the screen you wish this widget to be placed in. The parameter \f2xpos\f1
controls the placement of the object along the horizontal axis. This parameter
can accept an integer value or one of the pre-defined values of \f4LEFT\f1,
\f4RIGHT\f1, and \f4CENTER\f1. The parameter \f2ypos\f1 controls the placement
of the object along the vertical axis. This parameter can accept an integer 
value or one of the pre-defined values of \f4TOP\f1, \f4BOTTOM\f1, and \f4CENTER\f1.
The \f2title\f1 parameter is the string which will be displayed at the top of the 
widget. The title can be more than one line; just provide a carriage return 
character at the line break. The \f2label\f1 parameter is the string which will be 
displayed in the label of the slider field. The \f2fillerCharacter\f1 is the 
character to be used to draw the slider bar in the field. The parameter 
\f2fieldWidth\f1 controls the width of the widget. If you provide a value 
of zero the widget will be created with the full width of the screen. If 
you provide a negative value, the widget will be created the full width 
minus the value provided.  The parameter \f2currentValue\f1 
is the value of the slider field when the widget is activated. The parameters 
\f2lowValue\f1 and \f2highValue\f1 are the low and high values of the widget 
respectively. The parameter \f2increment\f1 is the regular increment value 
while \f2fastIncrement\f1 is the accelerated increment value. The \f2box\f1 
parameter states whether the widget will be drawn with a box around it or not.
The \f2shadow\f1 parameter accepts a boolean value to turn the shadow on or
off around this widget. If the widget could not be created then a \f4NULL\f1
pointer is returned.
.RE

int activateCDKSlider (CDKSLIDER *\f2slider\f1, chtype *\f2actions\f1);
.RS 3
This function activates the slider widget and lets the user interact with the
widget. The parameter \f2slider\f1 is a pointer to a non-NULL slider widget.
If the \f2actions\f1 parameter is passed with a non-NULL value, the characters
in the array will be injected into the widget. To activate the widget
interactively pass in a \f4NULL\f1 pointer for \f2actions\f1. If the character entered
into this widget is \f4RETURN\f1 or \f4TAB\f1 then this function will return a 
value from the low value to the high value. It will also set the structure
member \f4exitType\f1 to \f4vNORMAL\f1. If the character entered into this
widget was \f4ESCAPE\f1 then the widget will return a value of -1 and the
structure member \f4exitType\f1 will be set to \f4vESCAPE_HIT\f1.
.RE

int injectCDKSlider (CDKSLIDER *\f2slider\f1, chtype \f2character\f1);
.RS 3
This function injects a single character into the widget. The parameter 
\f2slider\f1 is a pointer to a non-NULL slider widget. The parameter 
\f2character\f1 is the character to inject into the widget. If the character 
injected into this widget was \f4RETURN\f1 then the character injected into
this widget is \f4RETURN\f1 or \f4TAB\f1 then this function will return a 
value from the low value to the high value. It will also set the structure
member \f4exitType\f1 to \f4vNORMAL\f1. If the character entered into this
widget was \f4ESCAPE\f1 then the widget will return a value of -1 and the
structure member \f4exitType\f1 will be set to \f4vESCAPE_HIT\f1. Any other
character injected into the widget will set the structure member
\f4exitType\f1 to \f4vEARLY_EXIT\f1 and the function will return -1.
.RE

void setCDKSlider (CDKSLIDER *\f2slider\f1, int \f2value\f1, int \f2minimumLength\f1, int \f2maximumLength\f1, boolean \f2box\f1);
.RS 3
This function lets the programmer modify certain elements of an already 
defined slider widget. The parameter names correspond to the same parameter 
names listed in the \f4newCDKSlider\f1 function.
.RE

void setCDKSliderLowHigh (CDKSLIDER *\f2slider\f1, int \f2lowValue\f1, int \f2highValue\f1);
.RS 3
This sets the low and high values of the widget.
.RE

int getCDKSliderLowValue (CDKSLIDER *\f2slider\f1);
.RS 3
This returns the low value of the slider widget.
.RE

int getCDKSliderHighValue (CDKSLIDER *\f2slider\f1);
.RS 3
This returns the high value of the slider widget.
.RE

void setCDKSliderValue (CDKSLIDER *\f2slider\f1, int \f2value\f1);
.RS 3
This sets the current value of the widget.
.RE

int getCDKSliderValue (CDKSLIDER *\f2slider\f1);
.RS 3
This returns the current value of the widget.
.RE

void setCDKSliderBox (CDKSLIDER *\f2slider\f1, boolean \f2boxWidget\f1);
.RS 3
This sets whether or not the widget will be draw with a box around it.
.RE

boolean getCDKSliderBox (CDKSLIDER *\f2slider\f1);
.RS 3
This returns whether or not the widget will be drawn with a box around it.
.RE

void setCDKSliderULChar (CDKSLIDER *\f2slider\f1, chtype \f2character\f1);
.RS 3
This function sets the upper left hand corner of the widgets box to
the given character.
.RE

void setCDKSliderURChar (CDKSLIDER *\f2slider\f1, chtype \f2character\f1);
.RS 3
This function sets the upper right hand corner of the widgets box to
the given character.
.RE

void setCDKSliderLLChar (CDKSLIDER *\f2slider\f1, chtype \f2character\f1);
.RS 3
This function sets the lower left hand corner of the widgets box to
the given character.
.RE

void setCDKSliderLRChar (CDKSLIDER *\f2slider\f1, chtype \f2character\f1);
.RS 3
This function sets the lower right hand corner of the widgets box to
the given character.
.RE

void setCDKSliderVerticalChar (CDKSLIDER *\f2slider\f1, chtype \f2character\f1);
.RS 3
This function sets the vertical drawing character for the box to
the given character.
.RE

void setCDKSliderHorizontalChar (CDKSLIDER *\f2slider\f1, chtype \f2character\f1);
.RS 3
This function sets the horizontal drawing character for the box to
the given character.
.RE

void setCDKSliderBoxAttribute (CDKSLIDER *\f2slider\f1, chtype \f2attribute\f1);
.RS 3
This function sets the attribute of the box.
.RE

void setCDKSliderBackgroundColor (CDKSLIDER *\f2slider\f1, char *\f2color\f1);
.RS 3
This sets the background color of the widget. The parameter \f2color\f1
is in the format of the Cdk format strings. To get more information look
at the \f4cdk_display\f1 manual page.
.RE

void moveCDKSlider (CDKSLIDER *\f2slider\f1, int \f2xpos\f1, int \f2ypos\f1, boolean \f2relative\f1, boolean \f2refresh\f1);
.RS 3
This function moves the given widget to the given position. The parameters
\f2xpos\f1 and \f2ypos\f1 is the new position of the widget. The parameter
\f2xpos\f1 can accept an integer value or one of the pre-defined values of
\f4TOP\f1, \f4BOTTOM\f1, and \f4CENTER\f1. The parameter \f2ypos\f1 can 
accept an integer value or one of the pre-defined values of \f4LEFT\f1,
\f4RIGHT\f1, and \f4CENTER\f1. The parameter \f2relative\f1 states whether
the \f2xpos\f1/\f2ypos\f1 pair is a relative move or an absolute move. For
example if \f2xpos\f1 = 1 and \f2ypos\f1 = 2 and \f2relative\f1 = \f2TRUE\f1,
then the widget would move one row down and two columns right. If the value
of \f2relative\f1 was \f2FALSE\f1 then the widget would move to the position
(1,2). Do not use the values of \f4TOP\f1, \f4BOTTOM\f1, \f4LEFT\f1, 
\f4RIGHT\f1, or \f4CENTER\f1 when \f2relative\f1 = \f4TRUE\f1. (wierd things
may happen). The final parameter \f2refresh\f1 is a boolean value which 
states whether the widget will get refreshed after the move or not.
.RE

void positionCDKSlider (CDKSLIDER *\f2slider\f1);
.RS 3
This function allows the user to move the widget around the screen via the
cursor/keypad keys. The following key bindings can be used to move the
widget around the screen.
.LP
.nf
\f4Key Bindings\f1
.RS 3
\f2Key          Action\f1
Up Arrow     Moves the widget up one line.
Down Arrow   Moves the widget down one line.
Left Arrow   Moves the widget left one column
Right Arrow  Moves the widget right one column
Keypad-1     Moves the widget down one line
             and left one column.
Keypad-2     Moves the widget down one line.
Keypad-3     Moves the widget down one line
             and right one column.
Keypad-4     Moves the widget left one column
Keypad-5     Centers the widget both vertically
             and horizontally.
Keypad-6     Moves the widget right one column
Keypad-7     Moves the widget up one line
             and left one column.
Keypad-8     Moves the widget up one line.
Keypad-9     Moves the widget up one line
             and right one column.
t            Moves the widget to the top of the screen.
b            Moves the widget to the bottom of the screen.
l            Moves the widget to the left of the screen.
r            Moves the widget to the right of the screen.
c            Centers the widget between the left and 
             right of the window.
C            Centers the widget between the top and 
             bottom of the window.
Escape       Returns the widget to it's original position.
Return       Exits the function and leaves the widget
             where it was.
.fi
.RE
.RS 3
.LP
Keypad means that if the keyboard you are using has a keypad, then the
Num-Lock light has to be on in order to use the keys as listed. (The
numeric keys at the top of the keyboard will work as well.)
.LP
void drawCDKSlider (CDKSLIDER *\f2slider\f1, boolean \f2box\f1);
.RS 3
This function draws the slider widget on the screen. The \f2box\f1 option 
draws the widget with or without a box.
.RE

void eraseCDKSlider (CDKSLIDER *\f2slider\f1);
.RS 3
This function removes the widget from the screen. This does \f4NOT\f1 destroy
the widget.
.RE

void destroyCDKSlider (CDKSLIDER *\f2slider\f1);
.RS 3
This function removes the widget from the screen and frees up any memory the
object may be using.
.RE

void setCDKSliderPreProcess (CDKSLIDER *\f2slider\f1, PROCESSFN \f2function\f1, void *\f2data\f1);
.RS 3
This function allows the user to have the widget call a function after a key
is hit and before the key is applied to the widget. The parameter \f2function\f1
if of type \f4PROCESSFN\f1. The parameter \f2data\f1 is a pointer to 
\f4void\f1. To learn more about pre-processing read the \f4cdk_process\f1
manual page.
.RE
 
void setCDKSliderPostProcess (CDKSLIDER *\f2slider\f1, PROCESSFN \f2function\f1, void *\f2data\f1);
.RS 3
This function allows the user to have the widget call a function after the
key has been applied to the widget.  The parameter \f2function\f1 if of type
\f4PROCESSFN\f1. The parameter \f2data\f1 is a pointer to \f4void\f1. To
learn more about post-processing read the \f4cdk_process\f1 manual page.
.RE

void bindCDKObject (EObjectType \f2widgetType\f1, void *\f2object\f1, char \f2key\f1, BINDFN \f2function\f1, void *\f2data\f1);
.RS 3
This function allows the user to create special key bindings. The 
\f2widgetType\f1 parameter is a defined type which states what Cdk object 
type is being used.  To learn more about the type \f4EObjectType\f1 read 
the \f2cdk_binding\f1 manual page. The \f2object\f1 parameter is the pointer
to the widget object. The \f2key\f1 is the character to bind. The 
\f2function\f1 is the function type. To learn more about the key binding 
callback function types read the \f4cdk_binding\f1 manual page. The last 
parameter \f2data\f1 is a pointer to any data that needs to get passed to 
the callback function.
.RE

.SH KEY BINDINGS
When the widget is activated there are several default key bindings which will
help the user enter or manipulate the information quickly. The following table
outlines the keys and their actions for this widget.
.LP
.nf
.RS 3
\f2Key         Action\f1
Left Arrow  Decrements the value in the field
            by the normal decrement value.
Down Arrow  Decrements the value in the field
            by the normal decrement value.
d           Decrements the value in the field
            by the normal decrement value.
-           Decrements the value in the field
            by the normal decrement value.
Right Arrow Increments the value in the field
            by the normal increment value.
Up Arrow    Increments the value in the field
            by the normal increment value.
u           Increments the value in the field
            by the normal increment value.
+           Increments the value in the field
            by the normal increment value.
Prev Page   Decrements the value in the field
            by the accelerated decrement value.
U           Decrements the value in the field
            by the accelerated decrement value.
Ctrl-B      Decrements the value in the field
            by the accelerated decrement value.
Next Page   Increments the value in the field
            by the accelerated increment value.
D           Increments the value in the field
            by the accelerated increment value.
Ctrl-F      Increments the value in the field
            by the accelerated increment value.
Home        Sets the value to the low value.
g           Sets the value to the low value.
0           Sets the value to the low value.
End         Sets the value to the high value.
G           Sets the value to the high value.
$           Sets the value to the high value.
Return      Exits the widget and returns an
            integer value representing the
            current value. This also sets the
            structure member \f4exitType\f1 in
            the widget pointer to the value of
            \f4vNORMAL\f1.
Tab         Exits the widget and returns an
            integer value representing the
            current value. This also sets the
            structure member \f4exitType\f1 in
            the widget pointer to the value of
            \f4vNORMAL\f1.
Escape      Exits the widget and returns -1.
            This also sets the structure member
            \f4exitType\f1 in the widget pointer
            to the value of \f4vESCAPE_HIT\f1.
Ctrl-R      Refreshes the screen.
.RE
.fi
.SH SEE ALSO
.BR cdk (3),
.BR cdk_binding (3),
.BR cdk_display (3),
.BR cdk_screen (3)
.SH NOTES
.PP
The header file \f4<cdk.h>\f1 automatically includes the header files
\f4<curses.h>\f1, \f4<stdlib.h>\f1, \f4<string.h>\f1, \f4<ctype.h>\f1,
\f4<unistd.h>\f1, \f4<dirent.h>\f1, \f4<time.h>\f1, \f4<errno.h>\f1,
\f4<pwd.h>\f1, \f4<grp.h>\f1, \f4<sys/stat.h>\f1, and \f4<sys/types.h>\f1.
The \f4<curses.h>\f1 header file includes \f4<stdio.h>\f1 and \f4<unctrl.h>\f1.
.PP
If you have \f4Ncurses\f1 installed on your machine add -DNCURSES to the 
compile line to include the Ncurses header files instead.
