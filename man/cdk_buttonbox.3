.de It
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH cdk_buttonbox 3 "24 April 1997"
.SH NAME
newCDKButtonbox, activateCDKButtonbox, injectCDKButtonbox, drawCDKButtonbox,
setCDKButtonbox, setCDKButtonboxHighlight, getCDKButtonboxHighlight,
setCDKButtonboxBox, getCDKButtonboxBox,
setCDKButtonboxULChar, setCDKButtonboxURChar,
setCDKButtonboxLLChar, setCDKButtonboxLRChar,
setCDKButtonboxVerticalChar, setCDKButtonboxHorizontalChar,
setCDKButtonboxBoxAttribute,
setCDKButtonboxBackgroundColor,
eraseCDKButtonbox, destroyCDKButtonbox, setCDKButtonboxPreProcess,
setCDKButtonboxPostProcess \- Creates a managed curses buttonbox widget.
.SH SYNOPSIS
.LP
.B cc
.RI "[ " "flag" " \|.\|.\|. ] " "file" " \|.\|.\|."
.B \-lcdk
.RI "[ " "library" " \|.\|.\|. ]"
.LP
#include <cdk.h>
.LP
.BI "CDKBUTTONBOX *newCDKButtonbox (CDKSCREEN *" "cdkscreen",
.BI "int " "xpos",
.BI "int " "ypos",
.BI "int " "height",
.BI "int " "width",
.BI "char ** " "title" ,
.BI "int " "rows",
.BI "int " "cols",
.BI "char ** " "buttons" ,
.BI "int " "buttonCount",
.BI "chtype " "highlight" ,
.BI "boolean " "box",
.BI "boolean " "shadow");
.LP
.BI "int activateCDKButtonbox (CDKBUTTONBOX *" "buttonbox",
.BI "chtype * " "actions");
.LP
.BI "int injectCDKButtonbox (CDKBUTTONBOX *" "buttonbox",
.BI "chtype " "input");
.LP
.BI "void setCDKButtonbox (CDKBUTTONBOX *" "buttonbox",
.BI "chtype " "highlight",
.BI "boolean " "box");
.LP
.BI "void setCDKButtonboxHighlight (CDKBUTTONBOX *" "buttonbox",
.BI "chtype " "highlight");
.LP
.BI "chtype getCDKButtonboxHighlight (CDKBUTTONBOX *" "buttonbox");
.LP
.BI "void setCDKButtonboxBox (CDKBUTTONBOX *" "buttonbox",
.BI "boolean " "box");
.LP
.BI "boolean getCDKButtonboxBox (CDKBUTTONBOX *" "buttonbox");
.LP
.BI "void setCDKButtonboxULChar (CDKBUTTONBOX *", "buttonbox",
.BI "chtype " "character");
.LP
.BI "void setCDKButtonboxURChar (CDKBUTTONBOX *", "buttonbox",
.BI "chtype " "character");
.LP
.BI "void setCDKButtonboxLLChar (CDKBUTTONBOX *", "buttonbox",
.BI "chtype " "character");
.LP
.BI "void setCDKButtonboxLRChar (CDKBUTTONBOX *", "buttonbox",
.BI "chtype " "character");
.LP
.BI "void setCDKButtonboxVerticalChar (CDKBUTTONBOX *", "buttonbox",
.BI "chtype " "character");
.LP
.BI "void setCDKButtonboxHorizontalChar (CDKBUTTONBOX *", "buttonbox",
.BI "chtype " "character");
.LP
.BI "void setCDKButtonboxBoxAttribute (CDKBUTTONBOX *", "buttonbox",
.BI "chtype " "character");
.LP
.BI "void setCDKButtonboxBackgroundColor (CDKBUTTONBOX *", "buttonbox",
.BI "char * " "color");
.LP
.BI "void moveCDKButtonbox (CDKBUTTONBOX *" "buttonbox",
.BI "int " "box",
.BI "int " "box",
.BI "boolean " "relative",
.BI "boolean " "refresh");
.LP
.BI "void positionCDKButtonbox (CDKBUTTONBOX *" "buttonbox");
.LP
.BI "void drawCDKButtonbox (CDKBUTTONBOX *" "buttonbox",
.BI "boolean " "box");
.LP
.BI "void eraseCDKButtonbox (CDKBUTTONBOX *" "buttonbox");
.LP
.BI "void setCDKButtonboxPreProcess (CDKBUTTONBOX *" "buttonbox",
.BI "PROCESSFN " "callback",
.BI "void * " "data");
.LP
.BI "void setCDKButtonboxPostProcess (CDKBUTTONBOX *" "buttonbox",
.BI "PROCESSFN " "callback",
.BI "void * " "data");
.LP
.BI "void destroyCDKButtonbox (CDKBUTTONBOX *" "buttonbox");
.LP
.BI "void bindCDKObject (EObjectType " "widgetType",
.BI "void * " "object",
.BI "chtype " "key",
.BI "BINDFN " "function",
.BI "void * " "data");
.SH DESCRIPTION
The Cdk buttonbox widget creates a buttonbox box with a message and a varied number of
buttons to choose from. The following are functions which create or manipulate
the Cdk buttonbox box widget.
.PP

.SH AVAILABLE FUNCTIONS
CDKBUTTONBOX *newCDKButtonbox (CDKSCREEN *\f2screen\f1, int \f2xpos\f1, int \f2ypos\f1, char **\f2title\f1 , int \f2rows\f1, int \f2cols\f1, char **\f2buttons\f1, int \f2buttonCount\f1, chtype \f2highLight\f1, boolean \f2box\f1, boolean \f2shadow\f1);
.RS 3
This function creates a pointer to a buttonbox widget. The \f2screen\f1 parameter
is the screen you wish this widget to be placed in. The parameter \f2xpos\f1
controls the placement of the object along the horizontal axis. This parameter
accepts an integer value or one of the pre-defined values of \f4LEFT\f1,
\f4RIGHT\f1, and \f4CENTER\f1. The parameter \f2ypos\f1 controls the placement
of the object along the vertical axis. This parameter can accept an integer 
value or one of the pre-defined values of \f4TOP\f1, \f4BOTTOM\f1, and \f4CENTER\f1.
The \f2height\f1 and \f2width\f1 parameters control the height and width of the
widget. The parameter \f2title\f1 is the title of the widget. The \f2rows\f1 
parameter states how many rows of buttons there will be; \f2\cols\f1 sets the number
of columns.  The \f2buttons\f1 array contains a list of all the buttons; while 
\f2buttonCount\f1 is the number of elements in the \f2button\f1 array. 
\f2highlight\f1 is the attribute of the currently highlighted button. The 
\f2box\f1 parameter states whether the widget will be drawn with a box around
it or not. The \f2shadow\f1 parameter accepts a boolean value to turn the shadow
on or off around this widget. If the widget could not be created then a \f4NULL\f1
pointer is returned.
.RE

int activateCDKButtonbox (CDKBUTTONBOX *\f2buttonbox\f1, chtype *\f2actions\f1);
.RS 3
This function activates the buttonbox widget and lets the user interact with the
widget. The parameter \f2buttonbox\f1 is a pointer to a non-NULL buttonbox widget.
If the \f2actions\f1 parameter is passed with a non-NULL value, the characters
in the array will be injected into the widget. To activate the widget
interactively pass in a \f4NULL\f1 pointer for \f2actions\f1. If the character entered
into this widget is \f4RETURN\f1 or \f4TAB\f1 then this function will return a 
value from 0 to the number of buttons -1, representing the button selected. It
will also set the structure member \f4exitType\f1 to \f4vNORMAL\f1. If the 
character entered into this widget was \f4ESCAPE\f1 then the widget will return
a value of -1 and the structure member \f4exitType\f1 will be set to
\f4vESCAPE_HIT\f1.
.RE

int injectCDKButtonbox (CDKBUTTONBOX *\f2buttonbox\f1, chtype \f2character\f1);
.RS 3
This function injects a single character into the widget. The parameter 
\f2buttonbox\f1 is a pointer to a non-NULL buttonbox widget. The parameter 
\f2character\f1 is the character to inject into the widget. If the character 
injected into this widget was \f4RETURN\f1 then the character injected into
this widget is \f4RETURN\f1 or \f4TAB\f1 then this function will return a 
value from 0 to the number of buttons -1, representing the button selected. It
will also set the structure member \f4exitType\f1 to \f4vNORMAL\f1. If the 
character entered into this widget was \f4ESCAPE\f1 then the widget will return
a value of -1 and the structure member \f4exitType\f1 will be set to
\f4vESCAPE_HIT\f1. Any other character injected into the widget will set the 
structure member \f4exitType\f1 to \f4vEARLY_EXIT\f1 and the function will 
return -1.
.RE

void setCDKButtonbox (CDKBUTTONBOX *\f2buttonbox\f1, chtype \f2highlight\f1, boolean \f2box\f1);
.RS 3
This function lets the programmer modify certain elements of an already defined
buttonbox widget. The parameter names correspond to the same parameter names listed
in the \f2newCDKButtonbox\f1 function.
.RE

void setCDKButtonboxHighlight (CDKBUTTONBOX *\f2buttonbox\f1, chtype \f2highlight\f1);
.RS 3
This sets the highlight attribute of the selected button.
.RE
chtype getCDKButtonboxHighlight (CDKBUTTONBOX *\f2buttonbox\f1);
.RS 3
This returns the highlight attribute of the widget.
.RE

void setCDKButtonboxBox (CDKBUTTONBOX *\f2buttonbox\f1, boolean \f2boxWidget\f1);
.RS 3
This sets whether or not the widget will be draw with a box around it.
.RE

boolean getCDKButtonboxBox (CDKBUTTONBOX *\f2buttonbox\f1);
.RS 3
This returns whether or not the widget will be drawn with a box around it.
.RE

void setCDKButtonboxULChar (CDKBUTTONBOX *\f2buttonbox\f1, chtype \f2character\f1);
.RS 3
This function sets the upper left hand corner of the widgets box to
the given character.
.RE

void setCDKButtonboxURChar (CDKBUTTONBOX *\f2buttonbox\f1, chtype \f2character\f1);
.RS 3
This function sets the upper right hand corner of the widgets box to
the given character.
.RE

void setCDKButtonboxLLChar (CDKBUTTONBOX *\f2buttonbox\f1, chtype \f2character\f1);
.RS 3
This function sets the lower left hand corner of the widgets box to
the given character.
.RE

void setCDKButtonboxLRChar (CDKBUTTONBOX *\f2buttonbox\f1, chtype \f2character\f1);
.RS 3
This function sets the lower right hand corner of the widgets box to
the given character.
.RE

void setCDKButtonboxVerticalChar (CDKBUTTONBOX *\f2buttonbox\f1, chtype \f2character\f1);
.RS 3
This function sets the vertical drawing character for the box to
the given character.
.RE

void setCDKButtonboxHorizontalChar (CDKBUTTONBOX *\f2buttonbox\f1, chtype \f2character\f1);
.RS 3
This function sets the horizontal drawing character for the box to
the given character.
.RE

void setCDKButtonboxBoxAttribute (CDKBUTTONBOX *\f2buttonbox\f1, chtype \f2attribute\f1);
.RS 3
This function sets the attribute of the box.
.RE

void setCDKButtonboxBackgroundColor (CDKBUTTONBOX *\f2buttonbox\f1, char *\f2color\f1);
.RS 3
This sets the background color of the widget. The parameter \f2color\f1
is in the format of the Cdk format strings. To get more information look
at the \f4cdk_display\f1 manual page.
.RE

void moveCDKButtonbox (CDKBUTTONBOX *\f2buttonbox\f1, int \f2xpos\f1, int \f2ypos\f1, boolean \f2relative\f1, boolean \f2refresh\f1);
.RS 3
This function moves the given widget to the given position. The parameters
\f2xpos\f1 and \f2ypos\f1 is the new position of the widget. The parameter
\f2xpos\f1 can accept an integer value or one of the pre-defined values of
\f4TOP\f1, \f4BOTTOM\f1, and \f4CENTER\f1. The parameter \f2ypos\f1 can 
accept an integer value or one of the pre-defined values of \f4LEFT\f1,
\f4RIGHT\f1, and \f4CENTER\f1. The parameter \f2relative\f1 states whether
the \f2xpos\f1/\f2ypos\f1 pair is a relative move or an absolute move. For
example if \f2xpos\f1 = 1 and \f2ypos\f1 = 2 and \f2relative\f1 = \f2TRUE\f1,
then the widget would move one row down and two columns right. If the value
of \f2relative\f1 was \f2FALSE\f1 then the widget would move to the position
(1,2). Do not use the values of \f4TOP\f1, \f4BOTTOM\f1, \f4LEFT\f1, 
\f4RIGHT\f1, or \f4CENTER\f1 when \f2relative\f1 = \f4TRUE\f1. (wierd things
may happen). The final parameter \f2refresh\f1 is a boolean value which states
whether the widget will get refreshed after the move or not.
.RE

void positionCDKButtonbox (CDKBUTTONBOX *\f2buttonbox\f1);
.RS 3
This function allows the user to move the widget around the screen via the
cursor/keypad keys. The following key bindings can be used to move the
widget around the screen.
.LP
.nf
\f4Key Bindings\f1
.RS 3
\f2Key          Action\f1
Up Arrow     Moves the widget up one line.
Down Arrow   Moves the widget down one line.
Left Arrow   Moves the widget left one column
Right Arrow  Moves the widget right one column
Keypad-1     Moves the widget down one line
             and left one column.
Keypad-2     Moves the widget down one line.
Keypad-3     Moves the widget down one line
             and right one column.
Keypad-4     Moves the widget left one column
Keypad-5     Centers the widget both vertically
             and horizontally.
Keypad-6     Moves the widget right one column
Keypad-7     Moves the widget up one line
             and left one column.
Keypad-8     Moves the widget up one line.
Keypad-9     Moves the widget up one line
             and right one column.
t            Moves the widget to the top of the screen.
b            Moves the widget to the bottom of the screen.
l            Moves the widget to the left of the screen.
r            Moves the widget to the right of the screen.
c            Centers the widget between the left and 
             right of the window.
C            Centers the widget between the top and 
             bottom of the window.
Escape       Returns the widget to it's original position.
Return       Exits the function and leaves the widget
             where it was.
.fi
.RE
.RS 3
.LP
Keypad means that if the keyboard you are using has a keypad, then the
Num-Lock light has to be on in order to use the keys as listed. (The
numeric keys at the top of the keyboard will work as well.)
.LP
void drawCDKButtonbox (CDKBUTTONBOX *\f2buttonbox\f1, boolean \f2box\f1);
.RS 3
This function draws the buttonbox widget on the screen. The \f2box\f1 option 
draws the widget with or without a box.
.RE

void eraseCDKButtonbox (CDKBUTTONBOX *\f2buttonbox\f1);
.RS 3
This function removes the widget from the screen. This does \f4NOT\f1 destroy
the widget.
.RE

void destroyCDKButtonbox (CDKBUTTONBOX *\f2buttonbox\f1);
.RS 3
This function removes the widget from the screen and frees up any memory the
object may be using.
.RE

void setCDKButtonboxPreProcess (CDKBUTTONBOX *\f2buttonbox\f1, PROCESSFN \f2function\f1, void *\f2data\f2);
.RS 3
This function allows the user to have the widget call a function after a key
is hit and before the key is applied to the widget. The parameter \f2function\f1
if of type \f4PROCESSFN\f1. The parameter \f2data\f1 is a pointer to 
\f4void\f1. To learn more about pre-processing read the \f4cdk_process\f1
manual page.
.RE

void setCDKButtonboxPostProcess (CDKBUTTONBOX *\f2buttonbox\f1, PROCESSFN \f2function\f1, void *\f2data\f2);
.RS 3
This function allows the user to have the widget call a function after the
key has been applied to the widget.  The parameter \f2function\f1 if of type 
\f4PROCESSFN\f1. The parameter \f2data\f1 is a pointer to \f4void\f1. To 
learn more about post-processing read the \f4cdk_process\f1 manual page.
.RE

void bindCDKObject (EObjectType \f2widgetType\f1, void *\f2object\f1, chtype \f2key\f1, BINDFN \f2function\f1, void *\f2data\f1);
.RS 3
This function allows the user to create special key bindings. The 
\f2widgetType\f1 parameter is a defined type which states what Cdk object 
type is being used.  To learn more about the type \f4EObjectType\f1 read 
the \f4cdk_binding\f1 manual page. The \f2object\f1 parameter is the pointer
to the widget object. The \f2key\f1 is the character to bind. The 
\f2function\f1 is the function type. To learn more about the key binding 
callback function types read the \f2cdk_binding\f1 manual page. The last 
parameter \f2data\f1 is a pointer to any data that needs to get passed to 
the callback function.
.RE
.SH KEY BINDINGS
When the widget is activated there are several default key bindings which will
help the user enter or manipulate the information quickly. The following table
outlines the keys and their actions for this widget.
.LP
.RS 3
.nf
\f2Key          Action\f1
Left Arrow   Selects the button to the left of the current button.
Right Arrow  Selects the button to the right of the current button.
Tab          Selects the button to the right of the current button.
Space        Selects the button to the right of the current button.
Return       Exits the widget and returns an integer value
             representing which button was selected. This also sets
             the structure member \f4exitType\f1 in the widget pointer
             to the value of \f4vNORMAL\f1.
Tab          Exits the widget and returns an integer value representing
             which button was selected. This also sets the structure
             member \f4exitType\f1 in the widget pointer to the value
             of \f4vNORMAL\f1.
Escape       Exits the widget and returns -1. This also sets the structure
             member \f4exitType\f1 in the widget pointer to the value of 
             \f4vESCAPE_HIT\f1.
Ctrl-L       Refreshes the screen.
.fi
.RE
.SH SEE ALSO
.BR cdk (3),
.BR cdk_binding (3),
.BR cdk_display (3),
.BR cdk_process (3),
.BR cdk_screen (3)
.SH NOTES
.PP
The header file \f4<cdk.h>\f1 automatically includes the header files
\f4<curses.h>\f1, \f4<stdlib.h>\f1, \f4<string.h>\f1, \f4<ctype.h>\f1,
\f4<unistd.h>\f1, \f4<dirent.h>\f1, \f4<time.h>\f1, \f4<errno.h>\f1,
\f4<pwd.h>\f1, \f4<grp.h>\f1, \f4<sys/stat.h>\f1, and \f4<sys/types.h>\f1.
The \f4<curses.h>\f1 header file includes \f4<stdio.h>\f1 and \f4<unctrl.h>\f1.
.PP
If you have \f4Ncurses\f1 installed on your machine add -DNCURSES to the 
compile line to include the Ncurses header files instead.
