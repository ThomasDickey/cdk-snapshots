'\" t
.\" $Id: cdk_selection.3,v 1.12 2003/04/17 23:32:53 tom Exp $"
.TH cdk_selection 3
.SH NAME
activateCDKSelection,
destroyCDKSelection,
drawCDKSelection,
eraseCDKSelection,
getCDKSelectionBox,
getCDKSelectionChoice,
getCDKSelectionChoices,
getCDKSelectionHighlight,
getCDKSelectionMode,
getCDKSelectionModes,
injectCDKSelection,
moveCDKSelection,
newCDKSelection,
positionCDKSelection,
setCDKSelection,
setCDKSelectionBackgroundColor,
setCDKSelectionBox,
setCDKSelectionBoxAttribute,
setCDKSelectionChoice,
setCDKSelectionChoices,
setCDKSelectionHighlight,
setCDKSelectionHorizontalChar,
setCDKSelectionLLChar,
setCDKSelectionLRChar,
setCDKSelectionMode,
setCDKSelectionModes,
setCDKSelectionPostProcess,
setCDKSelectionPreProcess,
setCDKSelectionULChar,
setCDKSelectionURChar,
setCDKSelectionVerticalChar \- curses selection list widget.
.SH SYNOPSIS
.LP
.B cc
.RI "[ " "flag" " \|.\|.\|. ] " "file" " \|.\|.\|."
.B \-lcdk
.RI "[ " "library" " \|.\|.\|. ]"
.LP
#include <cdk.h>
.nf
.TP 15
.B "int activateCDKSelection ("
.BI "CDKSELECTION *" "selection",
.BI "chtype * " "actions");
.TP 15
.B "void destroyCDKSelection ("
.BI "CDKSELECTION *" "selection");
.TP 15
.B "void drawCDKSelection ("
.BI "CDKSELECTION *" "selection",
.BI "boolean " "box");
.TP 15
.B "void eraseCDKSelection ("
.BI "CDKSELECTION *" "selection");
.TP 15
.B "boolean getCDKSelectionBox ("
.BI "CDKSELECTION *" "selection");
.TP 15
.B "int getCDKSelectionChoice ("
.BI "CDKSELECTION *" "selection",
.BI "int " "index");
.TP 15
.B "int *getCDKSelectionChoices ("
.BI "CDKSELECTION *" "selection");
.TP 15
.B "chtype getCDKSelectionHighlight ("
.BI "CDKSELECTION *" "selection");
.TP 15
.B "int getCDKSelectionMode ("
.BI "CDKSELECTION *" "selection",
.BI "int " "index");
.TP 15
.B "int *getCDKSelectionModes ("
.BI "CDKSELECTION *" "selection");
.TP 15
.B "int injectCDKSelection ("
.BI "CDKSELECTION *" "selection",
.BI "chtype " "input");
.TP 15
.B "void moveCDKSelection ("
.BI "CDKSELECTION *" "selection",
.BI "int " "xpos",
.BI "int " "ypos",
.BI "boolean " "relative",
.BI "boolean " "refresh");
.TP 15
.B "CDKSELECTION *newCDKSelection ("
.BI "CDKSCREEN *" "cdkscreen",
.BI "int " "xpos",
.BI "int " "ypos",
.BI "int " "spos",
.BI "int " "height",
.BI "int " "width",
.BI "char *" "title",
.BI "char **" "selectionList",
.BI "int " "selectionListLength",
.BI "char **" "choiceList",
.BI "int " "choiceListLength",
.BI "chtype " "highlight",
.BI "boolean " "box",
.BI "boolean " "shadow");
.TP 15
.B "void positionCDKSelection ("
.BI "CDKSELECTION *" "selection");
.TP 15
.B "void setCDKSelection ("
.BI "CDKSELECTION *" "selection",
.BI "chtype " "highlight",
.BI "int " "defChoices"[],
.BI "boolean " "box");
.TP 15
.B "void setCDKSelectionBackgroundColor ("
.BI "CDKSELECTION *" "selection",
.BI "char * " "color");
.TP 15
.B "void setCDKSelectionBox ("
.BI "CDKSELECTION *" "selection",
.BI "boolean " "boxWidget");
.TP 15
.B "void setCDKSelectionBoxAttribute ("
.BI "CDKSELECTION *" "selection",
.BI "chtype " "character");
.TP 15
.B "void setCDKSelectionChoice ("
.BI "CDKSELECTION *" "selection",
.BI "int " "index",
.BI "int " "choice");
.TP 15
.B "void setCDKSelectionChoices ("
.BI "CDKSELECTION *" "selection",
.BI "int " "choices[]");
.TP 15
.B "void setCDKSelectionHighlight ("
.BI "CDKSELECTION *" "selection",
.BI "chtype " "highlight");
.TP 15
.B "void setCDKSelectionHorizontalChar ("
.BI "CDKSELECTION *" "selection",
.BI "chtype " "character");
.TP 15
.B "void setCDKSelectionLLChar ("
.BI "CDKSELECTION *" "selection",
.BI "chtype " "character");
.TP 15
.B "void setCDKSelectionLRChar ("
.BI "CDKSELECTION *" "selection",
.BI "chtype " "character");
.TP 15
.B "void setCDKSelectionMode ("
.BI "CDKSELECTION *" "selection",
.BI "int " "index",
.BI "int " "mode");
.TP 15
.B "void setCDKSelectionModes ("
.BI "CDKSELECTION *" "selection",
.BI "int " "modes[]");
.TP 15
.B "void setCDKSelectionPostProcess ("
.BI "CDKSELECTION *" "selection",
.BI "PROCESSFN " "callback",
.BI "void * " "data");
.TP 15
.B "void setCDKSelectionPreProcess ("
.BI "CDKSELECTION *" "selection",
.BI "PROCESSFN " "callback",
.BI "void * " "data");
.TP 15
.B "void setCDKSelectionULChar ("
.BI "CDKSELECTION *" "selection",
.BI "chtype " "character");
.TP 15
.B "void setCDKSelectionURChar ("
.BI "CDKSELECTION *" "selection",
.BI "chtype " "character");
.TP 15
.B "void setCDKSelectionVerticalChar ("
.BI "CDKSELECTION *" "selection",
.BI "chtype " "character");
.fi
.SH DESCRIPTION
The Cdk selection widget creates a selection list.
The following functions create or manipulate the Cdk selection list widget.
.SH AVAILABLE FUNCTIONS
.TP 5
.B activateCDKSelection
activates the selection widget and lets the user interact with the widget.
The parameter \fBselection\fR is a pointer to a non-NULL selection widget.
If the \fBactions\fR parameter is passed with a non-NULL value, the characters
in the array will be injected into the widget.
To activate the widget
interactively pass in a \fINULL\fR pointer for \fBactions\fR.
If the character entered
into this widget is \fIRETURN\fR or \fITAB\fR then this function will return 1.
Itm will also set the widget data \fIexitType\fR to \fIvNORMAL\fR.
If the
character entered into this widget was \fIESCAPE\fR then the widget will return
a value of -1 and the widget data \fIexitType\fR will be set to
\fIvESCAPE_HIT\fR.
.TP 5
.B destroyCDKSelection
removes the widget from the screen and frees memory the object used.
.TP 5
.B drawCDKSelection
draws the selection widget on the screen.
If the \fBbox\fR parameter is true, the widget is drawn with a box.
.TP 5
.B eraseCDKSelection
removes the widget from the screen.
This does \fINOT\fR destroy the widget.
.TP 5
.B getCDKSelectionBox
returns true if the widget will be drawn with a box around it.
.TP 5
.B getCDKSelectionChoice
returns the selection choice at the given index.
.TP 5
.B getCDKSelectionChoices
returns an array of the current selection choices for the widget.
.TP 5
.B getCDKSelectionHighlight
returns the attribute of the highlight bar.
.TP 5
.B getCDKSelectionMode
returns the selection mode at the given index.
.TP 5
.B getCDKSelectionModes
returns an array of the current modes for the widget.
.TP 5
.B injectCDKSelection
injects a single character into the widget.
The parameter \fBselection\fR is a pointer to a non-NULL selection widget.
The parameter \fBcharacter\fR is the character to inject into the widget.
If the character
injected into this widget was \fIRETURN\fR then the character injected into
this widget is \fIRETURN\fR or \fITAB\fR then this function will return 1.
It will also set the widget data \fIexitType\fR to \fIvNORMAL\fR.
If the
character entered into this widget was \fIESCAPE\fR then the widget will return
a value of -1 and the widget data \fIexitType\fR will be set to
\fIvESCAPE_HIT\fR.
Any other character injected into the widget will set the
widget data \fIexitType\fR to \fIvEARLY_EXIT\fR and the function will
return -1.
.TP 5
.B moveCDKSelection
moves the given widget to the given position.
The parameters \fBxpos\fR and \fBypos\fR are the new position of the widget.
The parameter \fBxpos\fR may be an integer or one of the pre-defined values
\fITOP\fR, \fIBOTTOM\fR, and \fICENTER\fR.
The parameter \fBypos\fR may be an integer or one of the pre-defined values \fILEFT\fR,
\fIRIGHT\fR, and \fICENTER\fR.
The parameter \fBrelative\fR states whether
the \fBxpos\fR/\fBypos\fR pair is a relative move or an absolute move.
For example, if \fBxpos\fR = 1 and \fBypos\fR = 2 and \fBrelative\fR = \fBTRUE\fR,
then the widget would move one row down and two columns right.
If the value of \fBrelative\fR was \fBFALSE\fR then the widget would move to the position (1,2).
Do not use the values \fITOP\fR, \fIBOTTOM\fR, \fILEFT\fR,
\fIRIGHT\fR, or \fICENTER\fR when \fBrelative\fR = \fITRUE\fR.
(weird things may happen).
The final parameter \fBrefresh\fR is a boolean value which
states whether the widget will get refreshed after the move.
.TP 5
.B newCDKSelection
creates a selection widget and returns a pointer to it.
The \fBscreen\fR parameter is the screen you wish this widget to be placed in.
The parameter \fBxpos\fR controls the placement of the object along the horizontal axis.
This parameter may be an integer or one of the pre-defined values
\fILEFT\fR, \fIRIGHT\fR, and \fICENTER\fR.
The parameter \fBypos\fR controls the placement
of the object along the vertical axis.
This parameter may be an integer or one of the pre-defined values
\fITOP\fR, \fIBOTTOM\fR, and \fICENTER\fR.
The parameter \fBspos\fR is where the scroll bar is to be placed.
This may be one of three values: \fILEFT\fR, which puts the scroll bar on the left
of the scrolling list.
\fIRIGHT\fR which puts the scroll bar on the right side
of the list, and \fINONE\fR which does not add a scroll bar.
The parameters \fBheight\fR and \fBwidth\fR control the height and width of the widget.
If you provide a value of zero for either of the height or the width, the widget
will be created with the full width and height of the screen.
If you provide a
negative value, the widget will be created the full height or width minus the
value provided.
The \fBtitle\fR parameter is the string which will be
displayed at the top of the widget.
The title can be more than one line; just
provide a carriage return character at the line break.
The parameter \fBselectionList\fR is the list of items to be displayed in the
selection list; \fBselectionListLength\fR is the number of elements in the
given list.
The \fBchoiceList\fR parameter is the list of choices that will
be selected when the user presses the space bar; \fBchoiceListLength\fR is
the length of this list.
The \fBhighlight\fR parameter specifies the display
attribute of the currently selected item.
The \fBbox\fR parameter states
whether the widget will be drawn with a box around it.
The \fBshadow\fR parameter accepts a boolean value to turn the shadow on or off
around this widget.
If the widget could not be created then a \fINULL\fR
pointer is returned.
.TP 5
.B positionCDKSelection
allows the user to move the widget around the screen via the cursor/keypad keys.
See \fBcdk_position (3)\fR for key bindings.
.TP 5
.B setCDKSelection
lets the programmer modify certain elements of an existing selection widget.
The parameter names correspond to the same
parameter names listed in the \fInewCDKSelection\fR function.
.TP 5
.B setCDKSelectionBackgroundColor
sets the background color of the widget.
The parameter \fBcolor\fR
is in the format of the Cdk format strings.
See \fBcdk_display (3)\fR.
.TP 5
.B setCDKSelectionBox
sets whether the widget will be drawn with a box around it.
.TP 5
.B setCDKSelectionBoxAttribute
sets the attribute of the box.
.TP 5
.B setCDKSelectionChoice
sets the selection choice value at the given index.
.TP 5
.B setCDKSelectionChoices
sets the selection choice values of the widget.
.TP 5
.B setCDKSelectionHighlight
sets the attribute of the highlight bar.
.TP 5
.B setCDKSelectionHorizontalChar
sets the horizontal drawing character for the box to the given character.
.TP 5
.B setCDKSelectionLLChar
sets the lower left hand corner of the widget's box to the given character.
.TP 5
.B setCDKSelectionLRChar
sets the lower right hand corner of the widget's box to the given character.
.TP 5
.B setCDKSelectionMode
sets the selection mode at the given index.
.TP 5
.B setCDKSelectionModes
sets the selection mode of the elements of the widget.
There are two acceptable values for the modes: 0 which allows the user to change the
selection value at the given index; and 1 which sets the element to a read-only state.
.TP 5
.B setCDKSelectionPostProcess
allows the user to have the widget call a function after the
key has been applied to the widget.
The parameter \fBfunction\fR is the callback function.
The parameter \fBdata\fR points to data passed to the callback function.
To learn more about post-processing see \fIcdk_process (3)\fR.
.TP 5
.B setCDKSelectionPreProcess
allows the user to have the widget call a function after a key
is hit and before the key is applied to the widget.
The parameter \fBfunction\fR is the callback function.
The parameter \fBdata\fR is a pointer to
\fIvoid\fR.
To learn more about pre-processing see \fIcdk_process (3)\fR.
.TP 5
.B setCDKSelectionULChar
sets the upper left hand corner of the widget's box to the given character.
.TP 5
.B setCDKSelectionURChar
sets the upper right hand corner of the widget's box to the given character.
.TP 5
.B setCDKSelectionVerticalChar
sets the vertical drawing character for the box to the given character.
.SH KEY BINDINGS
When the widget is activated there are several default key bindings which will
help the user enter or manipulate the information quickly.
The following table
outlines the keys and their actions for this widget.
.LP
.TS
center tab(/) allbox;
l l
l l
lw15 lw35 .
\fBKey/Action\fR
=
Left Arrow/T{
Shifts the whole list left one character.
T}
Right Arrow/T{
Shifts the whole list right one character.
T}
Up Arrow/T{
Selects the next item up in the list.
T}
Down Arrow/T{
Selects the next item down in the list.
T}
Space/T{
Cycles to the next choice on the current item.
T}
Prev Page/Moves one page backwards.
Ctrl-B/Moves one page backwards.
Next Page/Moves one page forwards.
Ctrl-F/Moves one page forwards.
g/Moves to the first element in the list.
1/Moves to the first element in the list.
G/Moves to the last element in the list.
$/Shifts the whole list to the far right.
|/Shifts the whole list to the far left.
Return/T{
Exits the widget and returns 1.
This also sets the widget data \fIexitType\fR to \fIvNORMAL\fR.
T}
Tab/T{
Exits the widget and returns 1.
This also sets the widget data \fIexitType\fR to \fIvNORMAL\fR.
T}
Escape/T{
Exits the widget and returns -1.
This also sets the widget data \fIexitType\fR to \fIvESCAPE_HIT\fR.
T}
Ctrl-L/Refreshes the screen.
.TE
.SH SEE ALSO
.BR cdk (3),
.BR cdk_binding (3),
.BR cdk_display (3),
.BR cdk_position (3),
.BR cdk_screen (3)
