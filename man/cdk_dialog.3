'\" t
.\" $Id: cdk_dialog.3,v 1.11 2002/02/26 00:31:05 tom Exp $
.TH cdk_dialog 3
.SH NAME
activateCDKDialog,
destroyCDKDialog,
drawCDKDialog,
eraseCDKDialog,
getCDKAlphalistBox,
getCDKDialogBox,
getCDKDialogHighlight,
getCDKDialogSeparator,
injectCDKDialog,
moveCDKDialog,
newCDKDialog,
positionCDKDialog,
setCDKAlphalistBox,
setCDKDialog,
setCDKDialogBackgroundColor,
setCDKDialogBox,
setCDKDialogBoxAttribute,
setCDKDialogHighlight,
setCDKDialogHorizontalChar,
setCDKDialogLLChar,
setCDKDialogLRChar,
setCDKDialogPostProcess,
setCDKDialogPreProcess,
setCDKDialogSeparator,
setCDKDialogULChar,
setCDKDialogURChar,
setCDKDialogVerticalChar \- curses dialog widget
.SH SYNOPSIS
.LP
.B cc
.RI "[ " "flag" " \|.\|.\|. ] " "file" " \|.\|.\|."
.B \-lcdk
.RI "[ " "library" " \|.\|.\|. ]"
.LP
#include <cdk.h>
.nf
.TP 15
.B "int activateCDKDialog ("
.BI "CDKDIALOG *" "dialog",
.BI "chtype * " "actions");
.TP 15
.B "void destroyCDKDialog ("
.BI "CDKDIALOG *" "dialog");
.TP 15
.B "void drawCDKDialog ("
.BI "CDKDIALOG *" "dialog",
.BI "boolean " "box");
.TP 15
.B "void eraseCDKDialog ("
.BI "CDKDIALOG *" "dialog");
.TP 15
.B "boolean getCDKAlphalistBox ("
.BI "CDKDIALOG *" "dialog");
.TP 15
.B "boolean getCDKDialogBox ("
.BI "CDKDIALOG *" "dialog");
.TP 15
.B "chtype getCDKDialogHighlight ("
.BI "CDKDIALOG *" "dialog");
.TP 15
.B "boolean getCDKDialogSeparator ("
.BI "CDKDIALOG *" "dialog");
.TP 15
.B "int injectCDKDialog ("
.BI "CDKDIALOG *" "dialog",
.BI "chtype " "input");
.TP 15
.B "void moveCDKDialog ("
.BI "CDKDIALOG *" "dialog",
.BI "int " "box",
.BI "int " "box",
.BI "boolean " "relative",
.BI "boolean " "refresh");
.TP 15
.B "CDKDIALOG *newCDKDialog ("
.BI "CDKSCREEN *" "cdkscreen",
.BI "int " "xpos",
.BI "int " "ypos",
.BI "char ** " "message" ,
.BI "int " "rows",
.BI "char ** " "buttons" ,
.BI "int " "buttonCount",
.BI "chtype " "highlight" ,
.BI "boolean " "separator",
.BI "boolean " "box",
.BI "boolean " "shadow");
.TP 15
.B "void positionCDKDialog ("
.BI "CDKDIALOG *" "dialog");
.B "void setCDKAlphalistBox ("
.BI "CDKDIALOG *" "dialog",
.BI "boolean " "boxWidget");
.TP 15
.B "void setCDKDialog ("
.BI "CDKDIALOG *" "dialog",
.BI "chtype " "highlight",
.BI "boolean " "separator",
.BI "boolean " "box");
.TP 15
.B "void setCDKDialogBackgroundColor ("
.BI "CDKDIALOG *" "dialog",
.BI "char * " "color");
.TP 15
.B "void setCDKDialogBox ("
.BI "CDKDIALOG *" "dialog",
.BI "boolean " "box");
.TP 15
.B "void setCDKDialogBoxAttribute ("
.BI "CDKDIALOG *" "dialog",
.BI "chtype " "character");
.TP 15
.B "void setCDKDialogHighlight ("
.BI "CDKDIALOG *" "dialog",
.BI "chtype " "highlight");
.TP 15
.B "void setCDKDialogHorizontalChar ("
.BI "CDKDIALOG *" "dialog",
.BI "chtype " "character");
.TP 15
.B "void setCDKDialogLLChar ("
.BI "CDKDIALOG *" "dialog",
.BI "chtype " "character");
.TP 15
.B "void setCDKDialogLRChar ("
.BI "CDKDIALOG *" "dialog",
.BI "chtype " "character");
.TP 15
.B "void setCDKDialogPostProcess ("
.BI "CDKDIALOG *" "dialog",
.BI "PROCESSFN " "callback",
.BI "void * " "data");
.TP 15
.B "void setCDKDialogPreProcess ("
.BI "CDKDIALOG *" "dialog",
.BI "PROCESSFN " "callback",
.BI "void * " "data");
.TP 15
.B "void setCDKDialogSeparator ("
.BI "CDKDIALOG *" "dialog",
.BI "boolean " "separator");
.TP 15
.B "void setCDKDialogULChar ("
.BI "CDKDIALOG *" "dialog",
.BI "chtype " "character");
.TP 15
.B "void setCDKDialogURChar ("
.BI "CDKDIALOG *" "dialog",
.BI "chtype " "character");
.TP 15
.B "void setCDKDialogVerticalChar ("
.BI "CDKDIALOG *" "dialog",
.BI "chtype " "character");
.fi
.SH DESCRIPTION
The Cdk dialog widget creates a dialog box with a message and a varied number of
buttons to choose from.
The following functions create or manipulate the Cdk dialog box widget.
.PP
.SH AVAILABLE FUNCTIONS
.TP 5
.B activateCDKDialog
activates the dialog widget and lets the user interact with the widget.
The parameter \fBdialog\fR is a pointer to a non-NULL dialog widget.
If the \fBactions\fR parameter is passed with a non-NULL value, the characters
in the array will be injected into the widget.
To activate the widget
interactively pass in a \fINULL\fR pointer for \fBactions\fR.
If the character entered
into this widget is \fIRETURN\fR or \fITAB\fR then this function will return a
value from 0 to the number of buttons -1, representing the button selected.
It also sets the widget data \fIexitType\fR to \fIvNORMAL\fR.
If the character entered into this widget was \fIESCAPE\fR then the widget returns
a value of -1 and the widget data \fIexitType\fR will be set to
\fIvESCAPE_HIT\fR.
.TP 5
.B destroyCDKDialog
removes the widget from the screen and frees memory the object used.
.TP 5
.B drawCDKDialog
draws the dialog widget on the screen.
If the \fBbox\fR parameter is true, the widget is drawn with a box.
.TP 5
.B eraseCDKDialog
removes the widget from the screen.
This does \fINOT\fR destroy the widget.
.TP 5
.B getCDKAlphalistBox
returns true if the list will be drawn with a box around it.
.TP 5
.B getCDKDialogBox
returns true if the dialog will be drawn with a box around it.
.TP 5
.B getCDKDialogHighlight
returns the highlight attribute of the widget.
.TP 5
.B getCDKDialogSeparator
returns the state of the separator flag.
.TP 5
.B injectCDKDialog
injects a single character into the widget.
The parameter \fBdialog\fR is a pointer to a non-NULL dialog widget.
The parameter \fBcharacter\fR is the character to inject into the widget.
If the character
injected into this widget was \fIRETURN\fR then the character injected into
this widget is \fIRETURN\fR or \fITAB\fR then this function will return a
value from 0 to the number of buttons -1, representing the button selected.
It sets the widget data \fIexitType\fR to \fIvNORMAL\fR.
If the character entered into this widget was \fIESCAPE\fR then the widget will return
a value of -1 and the widget data \fIexitType\fR will be set to
\fIvESCAPE_HIT\fR.
Any other character injected into the widget sets the
widget data \fIexitType\fR to \fIvEARLY_EXIT\fR and the function will
return -1.
.TP 5
.B moveCDKDialog
moves the given widget to the given position.
The parameters \fBxpos\fR and \fBypos\fR are the new position of the widget.
The parameter \fBxpos\fR may be an integer or one of the pre-defined values
\fITOP\fR, \fIBOTTOM\fR, and \fICENTER\fR.
The parameter \fBypos\fR may be an integer or one of the pre-defined values \fILEFT\fR,
\fIRIGHT\fR, and \fICENTER\fR.
The parameter \fBrelative\fR states whether
the \fBxpos\fR/\fBypos\fR pair is a relative move or an absolute move.
For example, if \fBxpos\fR = 1 and \fBypos\fR = 2 and \fBrelative\fR = \fBTRUE\fR,
then the widget would move one row down and two columns right.
If the value of \fBrelative\fR was \fBFALSE\fR then the widget would move to the position (1,2).
Do not use the values \fITOP\fR, \fIBOTTOM\fR, \fILEFT\fR,
\fIRIGHT\fR, or \fICENTER\fR when \fBrelative\fR = \fITRUE\fR.
(weird things may happen).
The final parameter \fBrefresh\fR is a boolean value which states
whether the widget will get refreshed after the move.
.TP 5
.B newCDKDialog
creates a dialog widget and returns a pointer to it.
The \fBscreen\fR parameter
is the screen you wish this widget to be placed in.
The parameter \fBxpos\fR
controls the placement of the object along the horizontal axis.
This parameter
accepts an integer or one of the pre-defined values \fILEFT\fR,
\fIRIGHT\fR, and \fICENTER\fR.
The parameter \fBypos\fR controls the placement
of the object along the vertical axis.
This parameter may be an integer
value or one of the pre-defined values \fITOP\fR, \fIBOTTOM\fR, and \fICENTER\fR.
The parameter \fBmessage\fR is the message to be displayed in the message region
of the dialog box.
The \fBrows\fR parameter states how many elements there are
in the \fBmessage\fR.
The \fBbuttons\fR array contains a list of all the buttons
to be displayed on the bottom of the dialog box; while \fBbuttonCount\fR is the
number of elements in the \fBbutton\fR array.
\fBhighlight\fR is the attribute
of the currently highlighted button.
The \fBbox\fR parameter states whether the
widget will be drawn with a box around it.
\fBseparator\fR states
whether a separator line will be drawn between the message region and the buttons.
The \fBshadow\fR parameter accepts a boolean value to turn the shadow
on or off around this widget.
If the widget could not be created then a \fINULL\fR
pointer is returned.
.TP 5
.B positionCDKDialog
allows the user to move the widget around the screen via the
cursor/keypad keys.
See \fBcdk_position (3)\fR for key bindings.
.TP 5
.B setCDKAlphalistBox
sets whether the widget will be drawn with a box around it.
.TP 5
.B setCDKDialog
lets the programmer modify certain elements of an existing
dialog widget.
The parameter names correspond to the same parameter names listed
in the \fBnewCDKDialog\fR function.
.TP 5
.B setCDKDialogBackgroundColor
sets the background color of the widget.
The parameter \fBcolor\fR
is in the format of the Cdk format strings.
See \fBcdk_display (3)\fR.
.B setCDKDialogBox
sets the box attribute of the dialog widget.
.TP 5
.B setCDKDialogBoxAttribute
function sets the attribute of the box.
.TP 5
.B setCDKDialogHighlight
sets the highlight attribute of the selected button.
.TP 5
.B setCDKDialogHorizontalChar
sets the horizontal drawing character for the box to
the given character.
.TP 5
.B setCDKDialogLLChar
sets the lower left hand corner of the widgets box to
the given character.
.TP 5
.B setCDKDialogLRChar
sets the lower right hand corner of the widgets box to
the given character.
.TP 5
.B setCDKDialogPreProcess
allows the user to have the widget call a function after a key
is hit and before the key is applied to the widget.
The parameter \fBfunction\fR is the callback function.
The parameter \fBdata\fR is a pointer to
\fIvoid\fR.
To learn more about pre-processing see \fIcdk_process (3)\fR.
.TP 5
.B setCDKDialogPostProcess
allows the user to have the widget call a function after the
key has been applied to the widget.
The parameter \fBfunction\fR is the callback function.
The parameter \fBdata\fR points to data passed to the callback function.
To learn more about post-processing see \fIcdk_process (3)\fR.
.TP 5
.B setCDKDialogSeparator
sets the boolean flag whether the widget will be drawn with the
separator bar between the buttons and the message area.
.TP 5
.B setCDKDialogULChar
function sets the upper left hand corner of the widgets box to
the given character.
.TP 5
.B setCDKDialogURChar
sets the upper right hand corner of the widgets box to
the given character.
.TP 5
.B setCDKDialogVerticalChar
sets the vertical drawing character for the box to
the given character.
.SH KEY BINDINGS
When the widget is activated there are several default key bindings which will
help the user enter or manipulate the information quickly.
The following table
outlines the keys and their actions for this widget.
.LP
.TS
center tab(/) allbox;
l l
l l
lw15 lw35 .
\fBKey/Action\fR
=
Left Arrow/T{
Selects the button to the left of the current button.
T}
Right Arrow/T{
Selects the button to the right of the current button.
T}
Tab/T{
Selects the button to the right of the current button.
T}
Space/T{
Selects the button to the right of the current button.
T}
Return/T{
Exits the widget and returns the index of the selected button.
This also sets the widget data \fIexitType\fR to \fIvNORMAL\fR.
T}
Tab/T{
Exits the widget and returns the index of the selected button.
This also sets the widget data \fIexitType\fR to \fIvNORMAL\fR.
T}
Escape/T{
Exits the widget and returns -1.
This also sets the widget data \fIexitType\fR to \fIvESCAPE_HIT\fR.
T}
Ctrl-L/Refreshes the screen.
.TE
.SH SEE ALSO
.BR cdk (3),
.BR cdk_binding (3),
.BR cdk_display (3),
.BR cdk_position (3),
.BR cdk_process (3),
.BR cdk_screen (3)
