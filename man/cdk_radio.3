.de It
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH cdk_radio 3 "24 April 1997"
.SH NAME
newCDKRadio, activateCDKRadio, injectCDKRadio, setCDKRadio, 
setCDKRadioHighlight, getCDKRadioHighlight,
setCDKRadioChoiceCharacter, getCDKRadioChoiceCharacter,
setCDKRadioLeftBrace, getCDKRadioLeftBrace,
setCDKRadioRightBrace, getCDKRadioRightBrace,
setCDKRadioBox, getCDKRadioBox, 
setCDKRadioULChar, setCDKRadioURChar,
setCDKRadioLLChar, setCDKRadioLRChar,
setCDKRadioVerticalChar, setCDKRadioHorizontalChar,
setCDKRadioBoxAttribute,
setCDKRadioBackgroundColor,
drawCDKRadio, eraseCDKRadio, 
destroyCDKRadio, setCDKRadioPreProcess, setCDKRadioPostProcess
 \- Creates a managed curses radio list widget.
.SH SYNOPSIS
.LP
.B cc
.RI "[ " "flag" " \|.\|.\|. ] " "file" " \|.\|.\|."
.B \-lcdk
.RI "[ " "library" " \|.\|.\|. ]"
.LP
#include <cdk.h>
.LP
.BI "CDKRADIO *newCDKRadio (CDKSCREEN *" "cdkscreen",
.BI "int " "xpos",
.BI "int " "ypos",
.BI "int " "spos",
.BI "int " "height",
.BI "int " "width",
.BI "char *" "title",
.BI "char **" "radioList",
.BI "int " "radioListLength",
.BI "chtype " "choiceCharacter",
.BI "int " "defaultItem",
.BI "chtype " "highlight",
.BI "boolean " "box",
.BI "boolean " "shadow");
.LP
.BI "int activateCDKRadio (CDKRADIO *" "radio",
.BI "chtype *" "actions");
.LP
.BI "int injectCDKRadio (CDKRADIO *" "radio",
.BI "chtype " "input");
.LP
.BI "void setCDKRadio (CDKRADIO *" "radio",
.BI "chtype " "highlight",
.BI "chtype " "choiceCharacter",
.BI "boolean " "box");
.LP
.BI "void setCDKRadioHighlight (CDKRADIO *" "radio",
.BI "chtype " "highlight");
.LP
.BI "chtype getCDKRadioHighlight (CDKRADIO *" "radio");
.LP
.BI "void setCDKRadioChoiceCharacter (CDKRADIO *" "radio",
.BI "chtype " "character");
.LP
.BI "chtype getCDKRadioChoiceCharacter (CDKRADIO *" "radio");
.LP
.BI "void setCDKRadioLeftBrace (CDKRADIO *" "radio",
.BI "chtype " "character");
.LP
.BI "chtype getCDKRadioLeftBrace (CDKRADIO *" "radio");
.LP
.BI "void setCDKRadioRightBrace (CDKRADIO *" "radio",
.BI "chtype " "character");
.LP
.BI "chtype getCDKRadioRightBrace (CDKRADIO *" "radio");
.LP
.BI "void setCDKRadioBox (CDKRADIO *" "radio",
.BI "boolean " "box");
.LP
.BI "boolean getCDKRadioBox (CDKRADIO *" "radio");
.LP
.BI "void drawCDKRadio (CDKRADIO *" "radio",
.BI "boolean " "box");
.LP
.BI "void setCDKRadioULChar (CDKRADIO *", "radio",
.BI "chtype " "character");
.LP
.BI "void setCDKRadioURChar (CDKRADIO *", "radio",
.BI "chtype " "character");
.LP
.BI "void setCDKRadioLLChar (CDKRADIO *", "radio",
.BI "chtype " "character");
.LP
.BI "void setCDKRadioLRChar (CDKRADIO *", "radio",
.BI "chtype " "character");
.LP
.BI "void setCDKRadioVerticalChar (CDKRADIO *", "radio",
.BI "chtype " "character");
.LP
.BI "void setCDKRadioHorizontalChar (CDKRADIO *", "radio",
.BI "chtype " "character");
.LP
.BI "void setCDKRadioBoxAttribute (CDKRADIO *", "radio",
.BI "chtype " "character");
.LP
.BI "void setCDKRadioBackgroundColor (CDKRADIO *", "radio",
.BI "char * " "color");
.LP
.BI "void moveCDKRadio (CDKRADIO *" "radio",
.BI "int " "box",
.BI "int " "box",
.BI "boolean " "relative",
.BI "boolean " "refresh");
.LP
.BI "void positionCDKRadio (CDKRADIO *" "radio");
.LP
.BI "void eraseCDKRadio (CDKRADIO *" "radio");
.LP
.BI "void destroyCDKRadio (CDKRADIO *" "radio");
.LP
.BI "void setCDKRadioPreProcess (CDKRADIO *" "radio",
.BI "PROCESSFN " "callback",
.BI "void * " "data");
.LP
.BI "void setCDKRadioPostProcess (CDKRADIO *" "radio",
.BI "PROCESSFN " "callback",
.BI "void * " "data");
.LP
.BI "void bindCDKObject (EObjectType " "widgetType",
.BI "void *" "object",
.BI "chtype " "key",
.BI "BINDFN " "function",
.BI "void *" "data");
.SH DESCRIPTION
The Cdk radio widget creates a radio list. The following are functions which 
create or manipulate the Cdk radio box widget.

.SH AVAILABLE FUNCTIONS
CDKRADIO *newCDKRadio (CDKSCREEN *\f2screen\f1, int \f2xpos\f1, int \f2ypos\f1, int \f2height\f1, int \f2width\f1, char *\f2title\f1, char **\f2radioList\f1, int \f2radioListLength\f1, chtype \f2choiceCharacter\f1, int \f2defaultItem\f1, chtype \f2highlight\f1, boolean \f2box\f1, boolean \f2shadow\f1);
.RS 3
This function creates a pointer to a radio widget. The \f2screen\f1 parameter
is the screen you wish this widget to be placed in. The parameter \f2xpos\f1
controls the placement of the object along the horizontal axis. This parameter
can accept an integer value or one of the pre-defined values of \f4LEFT\f1,
\f4RIGHT\f1, and \f4CENTER\f1. The parameter \f2ypos\f1 controls the placement
of the object along the vertical axis. This parameter can accept an integer 
value or one of the pre-defined values of \f4TOP\f1, \f4BOTTOM\f1, and \f4CENTER\f1.
The parameter \f2spos\f1 is where the scroll bar is to be placed. This can
accept one of three values: \f4LEFT\f1, which puts the scroll bar on the left
of the scrolling list. \f4RIGHT\f1 which puts the scroll bar on the right side
of the list, and \f4NONE\f1 which does not add a scroll bar. The parameters 
\f2height\f1 and \f2width\f1 control the height and width of the widget. If you 
provide a value of zero for either of the height or the width, the widget will 
be created with the full width and height of the screen. If you provide a negative 
value, the widget will be created the full height or width minus the value provided.
The \f2title\f1 parameter is the string which will be displayed at the top of the 
widget. The title can be more than one line; just provide a carriage return 
character at the line break. The parameter \f2radioList\f1 is the list of items 
to be displayed in the radio list; \f2radioListLength\f1 is the number of elements 
in the given list. The \f2highlight\f1 parameter specifies the display attribute 
of the currently selected item. The \f2choiceCharacter\f1 parameter is the 
character to use to highlight the current selection. The \f2defaultItem\f1 
value is an integer which corresponds to the default selection.  The \f2box\f1 
parameter states whether the widget will be drawn with a box around it or not. 
The \f2shadow\f1 parameter accepts a boolean value to turn the shadow on or 
off around this widget.  If the widget could not be created then a \f4NULL\f1 
pointer is returned.
.RE

int activateCDKRadio (CDKRADIO *\f2radio\f1, chtype *\f2actions\f1);
.RS 3
This function activates the radio widget and lets the user interact with the
widget. The parameter \f2radio\f1 is a pointer to a non-NULL radio widget.
If the \f2actions\f1 parameter is passed with a non-NULL value, the characters
in the array will be injected into the widget. To activate the widget
interactively pass in a \f4NULL\f1 pointer for \f2actions\f1. If the character entered
into this widget is \f4RETURN\f1 or \f4TAB\f1 then this function will return a 
value from 0 to the number of items -1, representing the item selected. It
will also set the structure member \f4exitType\f1 to \f4vNORMAL\f1. If the 
character entered into this widget was \f4ESCAPE\f1 then the widget will return
a value of -1 and the structure member \f4exitType\f1 will be set to
\f4vESCAPE_HIT\f1.
.RE

int injectCDKRadio (CDKRADIO *\f2radio\f1, chtype \f2character\f1);
.RS 3
This function injects a single character into the widget. The parameter 
\f2radio\f1 is a pointer to a non-NULL radio widget. The parameter 
\f2character\f1 is the character to inject into the widget. If the character 
injected into this widget was \f4RETURN\f1 then the character injected into
this widget is \f4RETURN\f1 or \f4TAB\f1 then this function will return a 
value from 0 to the number of items -1, representing the items selected. It
will also set the structure member \f4exitType\f1 to \f4vNORMAL\f1. If the 
character entered into this widget was \f4ESCAPE\f1 then the widget will return
a value of -1 and the structure member \f4exitType\f1 will be set to
\f4vESCAPE_HIT\f1. Any other character injected into the widget will set the 
structure member \f4exitType\f1 to \f4vEARLY_EXIT\f1 and the function will 
return -1.
.RE

void setCDKRadio (CDKRADIO *\f2radio\f1, chtype \f2highlight\f1, chtype \f2choiceCharacter\f1, boolean \f2box\f1);
.RS 3
This function lets the programmer modify certain elements of an already defined
radio widget. The parameter names correspond to the same parameter names listed
in the \f4newCDKRadio\f1 function.
.RE

void setCDKRadioChoiceCharacter (CDKRADIO *\f2radio\f1, chtype \f2choiceCharacter\f1);
.RS 3
This sets the character to use to draw the selected element in the list.
.RE

chtype getCDKRadioChoiceCharacter (CDKRADIO *\f2radio\f1);
.RS 3
This returns the character being used to draw the selected element in the list.
.RE

void setCDKRadioLeftBrace (CDKRADIO *\f2radio\f1, chtype \f2choiceCharacter\f1);
.RS 3
This sets the character to use to draw the left brace of the selection box.
.RE

chtype getCDKRadioLeftBrace (CDKRADIO *\f2radio\f1);
.RS 3
This returns the character being used to draw the left brace of the selection box.
.RE

void setCDKRadioRightBrace (CDKRADIO *\f2radio\f1, chtype \f2choiceCharacter\f1);
.RS 3
This sets the character to use to draw the right brace of the selection box.
.RE

chtype getCDKRadioRightBrace (CDKRADIO *\f2radio\f1);
.RS 3
This returns the character being used to draw the right brace of the selection box.
.RE

void setCDKRadioHighlight (CDKRADIO *\f2radio\f1, chtype \f2highlight\f1);
.RS 3
This sets the attribute of the highlight bar.
.RE
 
chtype getCDKRadioHighlight (CDKRADIO *\f2radio\f1);
.RS 3
This returns the attribute of the highlight bar.
.RE
 
void setCDKRadioBox (CDKRADIO *\f2radio\f1, boolean \f2boxWidget\f1);
.RS 3
This sets whether or not the widget will be draw with a box around it.
.RE
 
boolean getCDKRadioBox (CDKRADIO *\f2radio\f1);
.RS 3
This returns whether or not the widget will be drawn with a box around it.
.RE

void setCDKRadioULChar (CDKRADIO *\f2radio\f1, chtype \f2character\f1);
.RS 3
This function sets the upper left hand corner of the widgets box to
the given character.
.RE

void setCDKRadioURChar (CDKRADIO *\f2radio\f1, chtype \f2character\f1);
.RS 3
This function sets the upper right hand corner of the widgets box to
the given character.
.RE

void setCDKRadioLLChar (CDKRADIO *\f2radio\f1, chtype \f2character\f1);
.RS 3
This function sets the lower left hand corner of the widgets box to
the given character.
.RE

void setCDKRadioLRChar (CDKRADIO *\f2radio\f1, chtype \f2character\f1);
.RS 3
This function sets the lower right hand corner of the widgets box to
the given character.
.RE

void setCDKRadioVerticalChar (CDKRADIO *\f2radio\f1, chtype \f2character\f1);
.RS 3
This function sets the vertical drawing character for the box to
the given character.
.RE

void setCDKRadioHorizontalChar (CDKRADIO *\f2radio\f1, chtype \f2character\f1);
.RS 3
This function sets the horizontal drawing character for the box to
the given character.
.RE

void setCDKRadioBoxAttribute (CDKRADIO *\f2radio\f1, chtype \f2attribute\f1);
.RS 3
This function sets the attribute of the box.
.RE

void setCDKRadioBackgroundColor (CDKRADIO *\f2radio\f1, char *\f2color\f1);
.RS 3
This sets the background color of the widget. The parameter \f2color\f1
is in the format of the Cdk format strings. To get more information look
at the \f4cdk_display\f1 manual page.
.RE

void moveCDKRadio (CDKRADIO *\f2radio\f1, int \f2xpos\f1, int \f2ypos\f1, boolean \f2relative\f1, boolean \f2refresh\f1);
.RS 3
This function moves the given widget to the given position. The parameters
\f2xpos\f1 and \f2ypos\f1 is the new position of the widget. The parameter
\f2xpos\f1 can accept an integer value or one of the pre-defined values of
\f4TOP\f1, \f4BOTTOM\f1, and \f4CENTER\f1. The parameter \f2ypos\f1 can 
accept an integer value or one of the pre-defined values of \f4LEFT\f1,
\f4RIGHT\f1, and \f4CENTER\f1. The parameter \f2relative\f1 states whether
the \f2xpos\f1/\f2ypos\f1 pair is a relative move or an absolute move. For
example if \f2xpos\f1 = 1 and \f2ypos\f1 = 2 and \f2relative\f1 = \f2TRUE\f1,
then the widget would move one row down and two columns right. If the value
of \f2relative\f1 was \f2FALSE\f1 then the widget would move to the position
(1,2). Do not use the values of \f4TOP\f1, \f4BOTTOM\f1, \f4LEFT\f1, 
\f4RIGHT\f1, or \f4CENTER\f1 when \f2relative\f1 = \f4TRUE\f1. (wierd things
may happen). The final parameter \f2refresh\f1 is a boolean value which 
states whether the widget will get refreshed after the move or not.
.RE

void positionCDKRadio (CDKRADIO *\f2radio\f1);
.RS 3
This function allows the user to move the widget around the screen via the
cursor/keypad keys. The following key bindings can be used to move the
widget around the screen.
.LP
.nf
\f4Key Bindings\f1
.RS 3
\f2Key          Action\f1
Up Arrow     Moves the widget up one line.
Down Arrow   Moves the widget down one line.
Left Arrow   Moves the widget left one column
Right Arrow  Moves the widget right one column
Keypad-1     Moves the widget down one line
             and left one column.
Keypad-2     Moves the widget down one line.
Keypad-3     Moves the widget down one line
             and right one column.
Keypad-4     Moves the widget left one column
Keypad-5     Centers the widget both vertically
             and horizontally.
Keypad-6     Moves the widget right one column
Keypad-7     Moves the widget up one line
             and left one column.
Keypad-8     Moves the widget up one line.
Keypad-9     Moves the widget up one line
             and right one column.
t            Moves the widget to the top of the screen.
b            Moves the widget to the bottom of the screen.
l            Moves the widget to the left of the screen.
r            Moves the widget to the right of the screen.
c            Centers the widget between the left and 
             right of the window.
C            Centers the widget between the top and 
             bottom of the window.
Escape       Returns the widget to it's original position.
Return       Exits the function and leaves the widget
             where it was.
.fi
.RE
.RS 3
.LP
Keypad means that if the keyboard you are using has a keypad, then the
Num-Lock light has to be on in order to use the keys as listed. (The
numeric keys at the top of the keyboard will work as well.)
.LP
void drawCDKRadio (CDKRADIO *\f2radio\f1, boolean \f2box\f1);
.RS 3
This function draws the radio widget on the screen. The \f2box\f1 option 
draws the widget with or without a box.
.RE

void eraseCDKRadio (CDKRADIO *\f2radio\f1);
.RS 3
This function removes the widget from the screen. This does \f4NOT\f1 destroy
the widget.
.RE

void destroyCDKRadio (CDKRADIO *\f2radio\f1);
.RS 3
This function removes the widget from the screen and frees up any memory the
object may be using.
.RE

void setCDKRadioPreProcess (CDKRADIO *\f2radio\f1, PROCESSFN \f2function\f1, void *\f2data\f1);
.RS 3
This function allows the user to have the widget call a function after a key
is hit and before the key is applied to the widget. The parameter \f2function\f1
if of type \f4PROCESSFN\f1. The parameter \f2data\f1 is a pointer to 
\f4void\f1. To learn more about pre-processing read the \f4cdk_process\f1
manual page.
.RE
 
void setCDKRadioPostProcess (CDKRADIO *\f2radio\f1, PROCESSFN \f2function\f1, void *\f2data\f1);
.RS 3
This function allows the user to have the widget call a function after the
key has been applied to the widget.  The parameter \f2function\f1 if of type
\f4PROCESSFN\f1. The parameter \f2data\f1 is a pointer to \f4void\f1. To
learn more about post-processing read the \f4cdk_process\f1 manual page.
.RE

void bindCDKObject (EObjectType \f2widgetType\f1, void *\f2object\f1, char \f2key\f1, BINDFN \f2function\f1, void *\f2data\f1);
.RS 3
This function allows the user to create special key bindings. The 
\f2widgetType\f1 parameter is a defined type which states what Cdk object 
type is being used.  To learn more about the type \f4EObjectType\f1 read 
the \f2cdk_binding\f1 manual page. The \f2object\f1 parameter is the pointer
to the widget object. The \f2key\f1 is the character to bind. The 
\f2function\f1 is the function type. To learn more about the key binding 
callback function types read the \f4cdk_binding\f1 manual page. The last 
parameter \f2data\f1 is a pointer to any data that needs to get passed to 
the callback function.
.RE

.SH KEY BINDINGS
When the widget is activated there are several default key bindings which will
help the user enter or manipulate the information quickly. The following table
outlines the keys and their actions for this widget.
.LP
.nf
.RS 3
\f2Key         Action\f1
Left Arrow  Shifts the whole list left one character.
Right Arrow Shifts the whole list right one character.
Up Arrow    Selects the next item up in the list.
Down Arrow  Selects the next item down in the list.
Space       Selects/deselects the current choice.
Prev Page   Moves one page backwards.
Ctrl-B      Moves one page backwards.
Next Page   Moves one page forwards.
Ctrl-F      Moves one page forwards.
g           Moves to the first element in the list.
1           Moves to the first element in the list.
G           Moves to the last element in the list.
$           Shifts the whole list to the far right.
|           Shifts the whole list to the far left.
Return      Exits the widget and returns an integer
            value representing which item was selected.
            This also sets the structure member \f4exitType\f1
            in the widget pointer to the value of \f4vNORMAL\f1.
Tab         Exits the widget and returns an integer
            value representing which item was selected.
            This also sets the structure member \f4exitType\f1
            in the widget pointer to the value of \f4vNORMAL\f1.
Escape      Exits the widget and returns -1. This also
            sets the structure member \f4exitType\f1 in the
            widget pointer to the value of \f4vESCAPE_HIT\f1.
Ctrl-L      Refreshes the screen.
.RE
.fi
.SH SEE ALSO
.BR cdk (3),
.BR cdk_binding (3),
.BR cdk_display (3),
.BR cdk_screen (3)
.SH NOTES
.PP
The header file \f4<cdk.h>\f1 automatically includes the header files
\f4<curses.h>\f1, \f4<stdlib.h>\f1, \f4<string.h>\f1, \f4<ctype.h>\f1,
\f4<unistd.h>\f1, \f4<dirent.h>\f1, \f4<time.h>\f1, \f4<errno.h>\f1,
\f4<pwd.h>\f1, \f4<grp.h>\f1, \f4<sys/stat.h>\f1, and \f4<sys/types.h>\f1.
The \f4<curses.h>\f1 header file includes \f4<stdio.h>\f1 and \f4<unctrl.h>\f1.
.PP
If you have \f4Ncurses\f1 installed on your machine add -DNCURSES to the 
compile line to include the Ncurses header files instead.
