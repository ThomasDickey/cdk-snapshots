'\" t
.\" $Id: cdk_scale.3,v 1.14 2002/07/09 00:54:35 tom Exp $"
.TH cdk_scale 3
.SH NAME
activateCDKScale,
destroyCDKScale,
drawCDKScale,
eraseCDKScale,
getCDKScaleBox,
getCDKScaleHighValue,
getCDKScaleLowValue,
getCDKScaleValue,
injectCDKScale,
moveCDKScale,
newCDKScale,
positionCDKScale,
setCDKScale,
setCDKScaleBackgroundColor,
setCDKScaleBox,
setCDKScaleBoxAttribute,
setCDKScaleHorizontalChar,
setCDKScaleLLChar,
setCDKScaleLRChar,
setCDKScaleLowHigh,
setCDKScalePostProcess,
setCDKScalePreProcess,
setCDKScaleULChar,
setCDKScaleURChar,
setCDKScaleValue,
setCDKScaleVerticalChar \- curses scale widget.
.SH SYNOPSIS
.LP
.B cc
.RI "[ " "flag" " \|.\|.\|. ] " "file" " \|.\|.\|."
.B \-lcdk
.RI "[ " "library" " \|.\|.\|. ]"
.LP
#include <cdk.h>
.nf
.TP 15
.B "int activateCDKScale ("
.BI "CDKSCALE *" "scale",
.BI "chtype *" "actions");
.TP 15
.B "void destroyCDKScale ("
.BI "CDKSCALE *" "scale");
.TP 15
.B "void drawCDKScale ("
.BI "CDKSCALE *" "scale",
.BI "boolean " "box");
.TP 15
.B "void eraseCDKScale ("
.BI "CDKSCALE *" "scale");
.TP 15
.B "boolean getCDKScaleBox ("
.BI "CDKSCALE *" "scale");
.TP 15
.B "int getCDKScaleHighValue ("
.BI "CDKSCALE *" "scale");
.TP 15
.B "int getCDKScaleLowValue ("
.BI "CDKSCALE *" "scale");
.TP 15
.B "int getCDKScaleValue ("
.BI "CDKSCALE *" "scale");
.TP 15
.B "int injectCDKScale ("
.BI "CDKSCALE *" "scale",
.BI "chtype " "input");
.TP 15
.B "void moveCDKScale ("
.BI "CDKSCALE *" "scale",
.BI "int " "box",
.BI "int " "box",
.BI "boolean " "relative",
.BI "boolean " "refresh");
.TP 15
.B "CDKSCALE *newCDKScale ("
.BI "CDKSCREEN *" "cdkscreen",
.BI "int " "xpos",
.BI "int " "ypos",
.BI "char *" "title",
.BI "char *" "label",
.BI "chtype " "fieldAttribute",
.BI "int " "fieldWidth",
.BI "int " "currentValue",
.BI "int " "lowValue",
.BI "int " "highValue",
.BI "int " "increment",
.BI "int " "fastIncrement",
.BI "boolean " "box",
.BI "boolean " "shadow");
.TP 15
.B "void positionCDKScale ("
.BI "CDKSCALE *" "scale");
.TP 15
.B "void setCDKScale ("
.BI "CDKSCALE *" "scale",
.BI "int " "lowValue",
.BI "int " "highValue",
.BI "int " "currentValue",
.BI "boolean " "box");
.TP 15
.B "void setCDKScaleBackgroundColor ("
.BI "CDKSCALE *" "scale",
.BI "char * " "color");
.TP 15
.B "void setCDKScaleBox ("
.BI "CDKSCALE *" "scale",
.BI "boolean " "box");
.TP 15
.B "void setCDKScaleBoxAttribute ("
.BI "CDKSCALE *" "scale",
.BI "chtype " "character");
.TP 15
.B "void setCDKScaleHorizontalChar ("
.BI "CDKSCALE *" "scale",
.BI "chtype " "character");
.TP 15
.B "void setCDKScaleLLChar ("
.BI "CDKSCALE *" "scale",
.BI "chtype " "character");
.TP 15
.B "void setCDKScaleLRChar ("
.BI "CDKSCALE *" "scale",
.BI "chtype " "character");
.TP 15
.B "void setCDKScaleLowHigh ("
.BI "CDKSCALE *" "scale",
.BI "int " "low",
.BI "int " "high");
.TP 15
.B "void setCDKScalePostProcess ("
.BI "CDKSCALE *" "scale",
.BI "PROCESSFN " "callback",
.BI "void * " "data");
.TP 15
.B "void setCDKScalePreProcess ("
.BI "CDKSCALE *" "scale",
.BI "PROCESSFN " "callback",
.BI "void * " "data");
.TP 15
.B "void setCDKScaleULChar ("
.BI "CDKSCALE *" "scale",
.BI "chtype " "character");
.TP 15
.B "void setCDKScaleURChar ("
.BI "CDKSCALE *" "scale",
.BI "chtype " "character");
.TP 15
.B "void setCDKScaleValue ("
.BI "CDKSCALE *" "scale",
.BI "int " "value");
.TP 15
.B "void setCDKScaleVerticalChar ("
.BI "CDKSCALE *" "scale",
.BI "chtype " "character");
.fi
.SH DESCRIPTION
The Cdk scale widget creates a scale box with a label and a scale field.
The following functions create or manipulate the Cdk scale box widget.
.SH AVAILABLE FUNCTIONS
.TP 5
.B activateCDKScale
activates the scale widget and lets the user interact with the widget.
The parameter \fBscale\fR is a pointer to a non-NULL scale widget.
If the \fBactions\fR parameter is passed with a non-NULL value, the characters
in the array will be injected into the widget.
To activate the widget
interactively pass in a \fINULL\fR pointer for \fBactions\fR.
If the character entered
into this widget is \fIRETURN\fR or \fITAB\fR then this function will return a
value from the low value to the high value.
It will also set the widget data \fIexitType\fR to \fIvNORMAL\fR.
If the character entered into this
widget was \fIESCAPE\fR then the widget will return a value of -1 and the
widget data \fIexitType\fR will be set to \fIvESCAPE_HIT\fR.
.TP 5
.B destroyCDKScale
removes the widget from the screen and frees memory the object used.
.TP 5
.B drawCDKScale
draws the scale widget on the screen.
If the \fBbox\fR parameter is true, the widget is drawn with a box.
.TP 5
.B eraseCDKScale
removes the widget from the screen.
This does \fINOT\fR destroy the widget.
.TP 5
.B getCDKScaleBox
returns whether the widget will be drawn with a box around it.
.TP 5
.B getCDKScaleHighValue
returns the high value of the scale widget.
.TP 5
.B getCDKScaleLowValue
returns the low value of the scale widget.
.TP 5
.B getCDKScaleValue
returns the current value of the widget.
.TP 5
.B injectCDKScale
injects a single character into the widget.
The parameter \fBscale\fR is a pointer to a non-NULL scale widget.
The parameter \fBcharacter\fR is the character to inject into the widget.
If the character
injected into this widget was \fIRETURN\fR then the character injected into
this widget is \fIRETURN\fR or \fITAB\fR then this function will return a
value from the low value to the high value.
It will also set the widget data \fIexitType\fR to \fIvNORMAL\fR.
If the character entered into this
widget was \fIESCAPE\fR then the widget will return a value of -1 and the
widget data \fIexitType\fR will be set to \fIvESCAPE_HIT\fR.
Any other
character injected into the widget will set the widget data \fIexitType\fR
to \fIvEARLY_EXIT\fR and the function will return -1.
.TP 5
.B moveCDKScale
moves the given widget to the given position.
The parameters \fBxpos\fR and \fBypos\fR are the new position of the widget.
The parameter \fBxpos\fR may be an integer or one of the pre-defined values
\fITOP\fR, \fIBOTTOM\fR, and \fICENTER\fR.
The parameter \fBypos\fR may be an integer or one of the pre-defined values \fILEFT\fR,
\fIRIGHT\fR, and \fICENTER\fR.
The parameter \fBrelative\fR states whether
the \fBxpos\fR/\fBypos\fR pair is a relative move or an absolute move.
For example, if \fBxpos\fR = 1 and \fBypos\fR = 2 and \fBrelative\fR = \fBTRUE\fR,
then the widget would move one row down and two columns right.
If the value of \fBrelative\fR was \fBFALSE\fR then the widget would move to the position (1,2).
Do not use the values \fITOP\fR, \fIBOTTOM\fR, \fILEFT\fR,
\fIRIGHT\fR, or \fICENTER\fR when \fBrelative\fR = \fITRUE\fR.
(weird things may happen).
The final parameter \fBrefresh\fR is a boolean value which
states whether the widget will get refreshed after the move.
.TP 5
.B newCDKScale
creates a pointer to a scale widget.
The \fBscreen\fR parameter
is the screen you wish this widget to be placed in.
The parameter \fBxpos\fR
controls the placement of the object along the horizontal axis.
This parameter
may be an integer or one of the pre-defined values \fILEFT\fR,
\fIRIGHT\fR, and \fICENTER\fR.
The parameter \fBypos\fR controls the placement
of the object along the vertical axis.
This parameter may be an integer
value or one of the pre-defined values \fITOP\fR, \fIBOTTOM\fR, and \fICENTER\fR.
The \fBtitle\fR parameter is the string which will be displayed at the top of the widget.
The title can be more than one line; just provide a carriage return
character at the line break.
The \fBlabel\fR parameter is the string which will be
displayed in the label of the scale field.
The \fBfieldAttribute\fR is the
attribute of the characters displayed in the field.
The parameter \fBfieldWidth\fR controls the width of the widget.
If you
provide a value of zero the widget will be created with the full width of
the screen.
If you provide a negative value, the widget will be created
the full width minus the value provided.
The parameter \fBcurrentValue\fR
is the value of the scale field when the widget is activated.
The parameters \fBlowValue\fR and \fBhighValue\fR are the low and high values of the widget respectively.
The parameter \fBincrement\fR is the regular increment value
while \fBfastIncrement\fR is the accelerated increment value.
The \fBbox\fR
parameter states whether the widget will be drawn with a box around it.
The \fBshadow\fR parameter accepts a boolean value to turn the shadow on or
off around this widget.
If the widget could not be created then a \fINULL\fR
pointer is returned.
.TP 5
.B positionCDKScale
allows the user to move the widget around the screen via the cursor/keypad keys.
See \fBcdk_position (3)\fR for key bindings.
.TP 5
.B setCDKScale
lets the programmer modify certain elements of an existing scale widget.
The parameter names correspond to the same parameter
names listed in the \fInewCDKScale\fR function.
.TP 5
.B setCDKScaleBackgroundColor
sets the background color of the widget.
The parameter \fBcolor\fR
is in the format of the Cdk format strings.
See \fBcdk_display (3)\fR.
.TP 5
.B setCDKScaleBox
sets whether the widget will be drawn with a box around it.
.TP 5
.B setCDKScaleBoxAttribute
sets the attribute of the box.
.TP 5
.B setCDKScaleHorizontalChar
sets the horizontal drawing character for the box to
the given character.
.TP 5
.B setCDKScaleLLChar
sets the lower left hand corner of the widget's box to
the given character.
.TP 5
.B setCDKScaleLRChar
sets the lower right hand corner of the widget's box to
the given character.
.TP 5
.B setCDKScaleLowHigh
sets the low and high values of the widget.
.TP 5
.B setCDKScalePostProcess
allows the user to have the widget call a function after the
key has been applied to the widget.
The parameter \fBfunction\fR is the callback function.
The parameter \fBdata\fR points to data passed to the callback function.
To learn more about post-processing see \fIcdk_process (3)\fR.
.TP 5
.B setCDKScalePreProcess
allows the user to have the widget call a function after a key
is hit and before the key is applied to the widget.
The parameter \fBfunction\fR is the callback function.
The parameter \fBdata\fR points to data passed to the callback function.
To learn more about pre-processing see \fIcdk_process (3)\fR.
.TP 5
.B setCDKScaleULChar
sets the upper left hand corner of the widget's box to
the given character.
.TP 5
.B setCDKScaleURChar
sets the upper right hand corner of the widget's box to
the given character.
.TP 5
.B setCDKScaleValue
sets the current value of the widget.
.TP 5
.B setCDKScaleVerticalChar
sets the vertical drawing character for the box to
the given character.
.SH KEY BINDINGS
When the widget is activated there are several default key bindings which will
help the user enter or manipulate the information quickly.
The following table
outlines the keys and their actions for this widget.
.LP
.TS
center tab(/);
l l
l l
lw15 lw35 .
\fBKey/Action\fR
=
Left Arrow/T{
Decrements the scale by the normal value.
T}
Down Arrow/T{
Decrements the scale by the normal value.
T}
d/Decrements the scale by the normal value.
-/Decrements the scale by the normal value.
Right Arrow/Increments the scale by the normal value.
Up Arrow/Increments the scale by the normal value.
u/Increments the scale by the normal value.
+/Increments the scale by the normal value.
Prev Page/Decrements the scale by the accelerated value.
U/Decrements the scale by the accelerated value.
Ctrl-B/Decrements the scale by the accelerated value.
Next Page/Increments the scale by the accelerated value.
D/Increments the scale by the accelerated value.
Ctrl-F/Increments the scale by the accelerated value.
Home/Sets the scale to the low value.
g/Sets the scale to the low value.
0/Sets the scale to the low value.
End/Sets the scale to the high value.
G/Sets the scale to the high value.
$/Sets the scale to the high value.
Return/T{
Exits the widget and returns the index of the selected value.
This also sets the widget data \fIexitType\fR to \fIvNORMAL\fR.
T}
Tab/T{
Exits the widget and returns the index of the selected value.
This also sets the widget data \fIexitType\fR to \fIvNORMAL\fR.
T}
Escape/T{
Exits the widget and returns -1.
This also sets the widget data \fIexitType\fR to \fIvESCAPE_HIT\fR.
T}
Ctrl-R/Refreshes the screen.
.TE
.SH SEE ALSO
.BR cdk (3),
.BR cdk_binding (3),
.BR cdk_display (3),
.BR cdk_position (3),
.BR cdk_screen (3)
