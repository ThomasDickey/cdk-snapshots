.de It
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH cdk_alphalist 3 "24 April 1997"
.SH NAME
newCDKAlphalist, activateCDKAlphalist, injectCDKAlphalist, setCDKAlphalist,
setCDKAlphalistContents, getCDKAlphalistContents,
setCDKAlphalistFillerChar, getCDKAlphalistFillerChar,
setCDKAlphalistContents, getCDKAlphalistContents,
setCDKAlphalistHighlight, getCDKAlphalistHighlight,
setCDKAlphalistBox, getCDKAlphalistBox,
setCDKAlphalistULChar, setCDKAlphalistURChar,
setCDKAlphalistLLChar, setCDKAlphalistLRChar,
setCDKAlphalistVerticalChar, setCDKAlphalistHorizontalChar,
setCDKAlphalistBoxAttribute,
setCDKAlphalistBackgroundColor,
moveCDKAlphalist, positionCDKAlphalist,
drawCDKAlphalist, eraseCDKAlphalist, destroyCDKAlphalist, 
setCDKAlphalistPreProcess, setCDKAlphalistPostProcess \-
Creates a managed curses sorted alphabet list widget.
.SH SYNOPSIS
.LP
.B cc
.RI "[ " "flag" " \|.\|.\|. ] " "file" " \|.\|.\|."
.B \-lcdk
.RI "[ " "library" " \|.\|.\|. ]"
.LP
#include <cdk.h>
.LP
.BI "CDKALPHALIST *newCDKAlphalist (CDKSCREEN *" "cdkscreen",
.BI "int " "xpos",
.BI "int " "ypos",
.BI "int " "height",
.BI "int " "width",
.BI "char * " "title",
.BI "char * " "label",
.BI "char ** " "list",
.BI "int " "listSize",
.BI "chtype " "fillerCharacter",
.BI "chtype " "highlight",
.BI "boolean " "box",
.BI "boolean " "shadow");
.LP
.BI "char *activateCDKAlphalist (CDKALPHALIST *" "alphalist",
.BI "chtype *" "actions");
.LP
.BI "char *injectCDKAlphalist (CDKALPHALIST *" "alphalist",
.BI "chtype " "input");
.LP
.BI "void setCDKAlphalist (CDKALPHALIST *" "alphalist",
.BI "char ** " "list",
.BI "int " "listSize",
.BI "chtype " "fillerCharacter",
.BI "chtype " "highlight",
.BI "boolean " "box");
.LP
.BI "void setCDKAlphalistContents (CDKALPHALIST *" "alphalist",
.BI "char ** " "list",
.BI "int " "listSize");
.LP
.BI "char **getCDKAlphalistContents (CDKALPHALIST *" "alphalist");
.LP
.BI "void setCDKAlphalistFillerChar (CDKALPHALIST *" "alphalist",
.BI "chtype " "fillerCharacter");
.LP
.BI "chtype getCDKAlphalistFillerChar (CDKALPHALIST *" "alphalist");
.LP
.BI "void setCDKAlphalistHighlight (CDKALPHALIST *" "alphalist",
.BI "chtype " "highlight");
.LP
.BI "chtype setCDKAlphalistHighlight (CDKALPHALIST *" "alphalist");
.LP
.BI "void setCDKAlphalistBox (CDKALPHALIST *" "alphalist",
.BI "boolean " "box");
.LP
.BI "boolean getCDKAlphalistBox (CDKALPHALIST *" "alphalist");
.LP
.BI "void setCDKAlphalistULChar (CDKALPHALIST *", "alphalist",
.BI "chtype " "character");
.LP
.BI "void setCDKAlphalistURChar (CDKALPHALIST *", "alphalist",
.BI "chtype " "character");
.LP
.BI "void setCDKAlphalistLLChar (CDKALPHALIST *", "alphalist",
.BI "chtype " "character");
.LP
.BI "void setCDKAlphalistLRChar (CDKALPHALIST *", "alphalist",
.BI "chtype " "character");
.LP
.BI "void setCDKAlphalistVerticalChar (CDKALPHALIST *", "alphalist",
.BI "chtype " "character");
.LP
.BI "void setCDKAlphalistHorizontalChar (CDKALPHALIST *", "alphalist",
.BI "chtype " "character");
.LP
.BI "void setCDKAlphalistBoxAttribute (CDKALPHALIST *", "alphalist",
.BI "chtype " "character");
.LP
.BI "void setCDKAlphalistBackgroundColor (CDKALPHALIST *", "alphalist",
.BI "char * " "color");
.LP
.BI "void moveCDKAlphalist (CDKALPHALIST *" "alphalist",
.BI "int " "box",
.BI "int " "box",
.BI "boolean " "relative",
.BI "boolean " "refresh");
.LP
.BI "void positionCDKAlphalist (CDKALPHALIST *" "alphalist");
.LP
.BI "void drawCDKAlphalist (CDKALPHALIST *" "alphalist",
.BI "boolean " "box");
.LP
.BI "void eraseCDKAlphalist (CDKALPHALIST *" "alphalist");
.LP
.BI "void destroyCDKAlphalist (CDKALPHALIST *" "alphalist");
.LP
.BI "void setCDKAlphalistPreProcess (CDKALPHALIST *" "alphalist",
.BI "PROCESSFN " "callback",
.BI "void * " "data");
.LP
.BI "void setCDKAlphalistPostProcess (CDKALPHALIST *" "alphalist",
.BI "PROCESSFN " "callback",
.BI "void * " "data");
.LP
.BI "void bindCDKObject (EObjectType " "widgetType",
.BI "void *" "object",
.BI "chtype " "key",
.BI "BINDFN " "function",
.BI "void *" "data");
.SH DESCRIPTION
The Cdk alphalist allows a user to select from a list of alphabetically 
sorted words. The user can use the arrow keys to traverse through the 
list or type in the beginning of the word and the list will automatically 
adjust itself in the correct place in the scrolling list. This widget,
like the file selector widget, is a compound widget of both the entry 
field widget and the scrolling list widget.

.SH AVAILABLE FUNCTIONS
CDKALPHALIST *newCDKAlphalist (CDKSCREEN * \f2screen\f1, int \f2xpos\f1, int \f2ypos\f1, int \f2height\f1, int \f2width\f1, char *\f2title\f1, char *\f2label\f1, char **\f2list\f1, int \f2listSize\f1, chtype \f2fillerChar\f1, chtype \f2highlight\f1, boolean \f2box\f1, boolean \f2shadow\f1);
.RS 3
This function creates a pointer to an alphalist widget. The \f2screen\f1 parameter
is the screen you wish this widget to be placed in. The parameter \f2xpos\f1 
controls the placement of the object along the horizontal axis. This parameter
can take an integer value or one of the pre-defined values of \f4LEFT\f1, 
\f4RIGHT\f1, and \f4CENTER\f1. The parameter \f2ypos\f1 controls the placement
of the object along the vertical axis. This parameter can accept an integer 
value or one of the pre-defined values of \f4TOP\f1, \f4BOTTOM\f1, and 
\f4CENTER\f1. The parameters \f2height\f1 and \f2width\f1 control the height 
and width of the widget. If you provide a value of zero for either of the height
or the width, the widget will be created with the full width and height of the
screen. If you provide a negative value, the widget will be created the full height
or width minus the value provided. The \f2title\f1 parameter is the string which
will be displayed at the top of the scrolling list. The title can be more than one
line; just provide a carriage return character at the line break. The \f2label\f1 
parameter is the string which will be displayed in the label of the entry field.
The parameter \f2list\f1 is the list of words which will be displayed in the 
scrolling list. This list does not have to be sorted, this widget automatically
sorts the list. The parameter \f2listSize\f1 tells the widget how large the word
list is.  The field \f2fillerCharacter\f1 is the character which is to be displayed
in an empty space in the entry field. The field \f2highlight\f1 is the attribute
of the highlight bar in the scrolling list. The \f2box\f1 parameter states whether
the widget will be drawn with a box around it or not. The \f2shadow\f1 parameter
accepts a boolean value to turn the shadow on or off around this widget. If the
widget could not be created then a \f4NULL\f1 pointer is returned.
.RE

char *activateCDKAlphalist (CDKALPHALIST *\f2alphalist\f1, chtype *\f2actions\f1);
.RS 3
This function activates the alphalist widget and lets the user interact with the
widget. The parameter \f2alphalist\f1 is a pointer to a non-NULL alphalist
widget. If the \f2actions\f1 parameter is passed with a non-NULL value, the 
characters in the array will be injected into the widget. To activate the widget
interactively pass in a \f4NULL\f1 pointer for \f2actions\f1. If the character entered
into this widget is \f4RETURN\f1 then this function will return a \f4char *\f1 
of the information which was typed in the field. If the \f4TAB\f1 character is hit
then the widget will try to complete the word in the entry field. If the widget
is exited with the \f4RETURN\f1 character then the structure member \f4exitType\f1
will be set to \f4vNORMAL\f1. If the widget was exited with the \f4ESCAPE\f1 key
then the structure member \f4exitType\f1 will be set to \f4vESCAPE_HIT\f1 and
the widget returns \f4NULL\f1.
.RE

char *injectCDKAlphalist (CDKALPHALIST *\f2alphalist\f1, chtype \f2character\f1);
.RS 3
This function injects a single character into the widget. The parameter 
\f2alphalist\f1 is a pointer to a non-NULL alphalist widget. The parameter 
\f2character\f1 is the character to inject into the widget. If the character 
injected into this widget was \f4RETURN\f1 then the information in the entry
field of this widget will be returned and the structure member \f4exitType\f1
will be set to \f4vNORMAL\f1. If the character injected was \f4ESCAPE\f1 then
the widget will exit, return a \f4NULL\f1 pointer, and set the structure member
\f4exitType\f1 to \f4vESCAPE_HIT\f1. Any other character injected into the widget
will set the structure member \f4exitType\f1 to a value of \f4vEARLY_EXIT\f1 and
a \f4NULL\f1 pointer will be returned.
.RE

void setCDKAlphalist (CDKALPHALIST *\f2alphalist\f1, char **\f2list\f1, int \f2listSize\f1, chtype \f2fillerCharacter\f1, chtype \f2highlight\f1, boolean \f2box\f1);
.RS 3
This function lets the programmer modify certain elements of an already 
defined alphalist widget. The parameter names correspond to the same parameter 
names listed in the \f4newCDKAlphalist\f1 function.
.RE

void setCDKAlphalistContents (CDKALPHALIST *\f2alphalist\f1, char **\f2list\f1, int \f2listSize\f1);
.RS 3
This function sets the contents of the alphalist widget.
.RE

char **getCDKAlphalistContents (CDKALPHALIST *\f2alphalist\f1);
.RS 3
This function returns the contents of the alphalist.
.RE

void setCDKAlphalistFillerChar (CDKALPHALIST *\f2alphalist\f1, chtype \f2filler\f1);
.RS 3
This sets the character to use when drawing the entry field portion of the
widget.
.RE

chtype getCDKAlphalistFillerChar (CDKALPHALIST *\f2alphalist\f1);
.RS 3
This returns the character being used as the filler character in the
entry field portion of the widget.
.RE

void setCDKAlphalistHighlight (CDKALPHALIST *\f2alphalist\f1, chtype \f2highlight\f1);
.RS 3
This function sets the attribute of the highlight bar of the scrolling
list portion of the widget.
.RE

chtype getCDKAlphalistHighlight (CDKALPHALIST *\f2alphalist\f1);
.RS 3
This returns the attribute of the highlight bar of the scrolling
list portion of the widget.
.RE

void setCDKAlphalistBox (CDKALPHALIST *\f2alphalist\f1, boolean \f2boxWidget\f1);
.RS 3
This sets whether or not the widget will be draw with a box around it.
.RE

boolean getCDKAlphalistBox (CDKALPHALIST *\f2alphalist\f1);
.RS 3
This returns whether or not the widget will be drawn with a box around it.
.RE

void setCDKAlphalistULChar (CDKALPHALIST *\f2alphalist\f1, chtype \f2character\f1);
.RS 3
This function sets the upper left hand corner of the widgets box to
the given character.
.RE

void setCDKAlphalistURChar (CDKALPHALIST *\f2alphalist\f1, chtype \f2character\f1);
.RS 3
This function sets the upper right hand corner of the widgets box to
the given character.
.RE

void setCDKAlphalistLLChar (CDKALPHALIST *\f2alphalist\f1, chtype \f2character\f1);
.RS 3
This function sets the lower left hand corner of the widgets box to
the given character.
.RE

void setCDKAlphalistLRChar (CDKALPHALIST *\f2alphalist\f1, chtype \f2character\f1);
.RS 3
This function sets the lower right hand corner of the widgets box to
the given character.
.RE

void setCDKAlphalistVerticalChar (CDKALPHALIST *\f2alphalist\f1, chtype \f2character\f1);
.RS 3
This function sets the vertical drawing character for the box to
the given character.
.RE

void setCDKAlphalistHorizontalChar (CDKALPHALIST *\f2alphalist\f1, chtype \f2character\f1);
.RS 3
This function sets the horizontal drawing character for the box to
the given character.
.RE

void setCDKAlphalistBoxAttribute (CDKALPHALIST *\f2alphalist\f1, chtype \f2attribute\f1);
.RS 3
This function sets the attribute of the box.
.RE

void setCDKAlphalistBackgroundColor (CDKALPHALIST *\f2alphalist\f1, char *\f2color\f1);
.RS 3
This sets the background color of the widget. The parameter \f2color\f1
is in the format of the Cdk format strings. To get more information look
at the \f4cdk_display\f1 manual page.
.RE

void moveCDKAlphalist (CDKALPHALIST *\f2alphalist\f1, int \f2xpos\f1, int \f2ypos\f1, boolean \f2relative\f1, boolean \f2refresh\f1);
.RS 3
This function moves the given widget to the given position. The parameters
\f2xpos\f1 and \f2ypos\f1 is the new position of the widget. The parameter
\f2xpos\f1 can accept an integer value or one of the pre-defined values of
\f4TOP\f1, \f4BOTTOM\f1, and \f4CENTER\f1. The parameter \f2ypos\f1 can 
accept an integer value or one of the pre-defined values of \f4LEFT\f1,
\f4RIGHT\f1, and \f4CENTER\f1. The parameter \f2relative\f1 states whether
the \f2xpos\f1/\f2ypos\f1 pair is a relative move or an absolute move. For
example if \f2xpos\f1 = 1 and \f2ypos\f1 = 2 and \f2relative\f1 = \f2TRUE\f1,
then the widget would move one row down and two columns right. If the value
of \f2relative\f1 was \f2FALSE\f1 then the widget would move to the position
(1,2). Do not use the values of \f4TOP\f1, \f4BOTTOM\f1, \f4LEFT\f1, 
\f4RIGHT\f1, or \f4CENTER\f1 when \f2relative\f1 = \f4TRUE\f1. (wierd 
things may happen). The final parameter \f2refresh\f1 is a boolean value 
which states whether the widget will get refreshed after the move or not.
.RE

void positionCDKAlphalist (CDKALPHALIST *\f2alphalist\f1);
.RS 3
This function allows the user to move the widget around the screen via the
cursor/keypad keys. The following key bindings can be used to move the
widget around the screen.
.LP
.nf
\f4Key Bindings\f1
.RS 3
\f2Key          Action\f1
Up Arrow     Moves the widget up one line.
Down Arrow   Moves the widget down one line.
Left Arrow   Moves the widget left one column
Right Arrow  Moves the widget right one column
Keypad-1     Moves the widget down one line
             and left one column.
Keypad-2     Moves the widget down one line.
Keypad-3     Moves the widget down one line
             and right one column.
Keypad-4     Moves the widget left one column
Keypad-5     Centers the widget both vertically
             and horizontally.
Keypad-6     Moves the widget right one column
Keypad-7     Moves the widget up one line
             and left one column.
Keypad-8     Moves the widget up one line.
Keypad-9     Moves the widget up one line
             and right one column.
t            Moves the widget to the top of the screen.
b            Moves the widget to the bottom of the screen.
l            Moves the widget to the left of the screen.
r            Moves the widget to the right of the screen.
c            Centers the widget between the left and 
             right of the window.
C            Centers the widget between the top and 
             bottom of the window.
Escape       Returns the widget to it's original position.
Return       Exits the function and leaves the widget
             where it was.
.fi
.RE
.RS 3
.LP
Keypad means that if the keyboard you are using has a keypad, then the
Num-Lock light has to be on in order to use the keys as listed. (The
numeric keys at the top of the keyboard will work as well.)
.RE

void drawCDKAlphalist (CDKALPHALIST *\f2alphalist\f1, boolean \f2box\f1);
.RS 3
This function draws the alphalist widget on the screen. The \f2box\f1 option 
draws the widget with or without a box.
.RE

void eraseCDKAlphalist (CDKALPHALIST *\f2alphalist\f1);
.RS 3
This function removes the widget from the screen. This does \f4NOT\f1 destroy
the widget.
.RE

void destroyCDKAlphalist (CDKALPHALIST *\f2alphalist\f1);
.RS 3
This function removes the widget from the screen and frees up any memory the
object may be using.
.RE

void setCDKAlphalistPreProcess (CDKALPHALIST *\f2alphalist\f1, PROCESSFN \f2function\f1, void *\f2data\f1);
.RS 3
This function allows the user to have the widget call a function after a key
is hit and before the key is applied to the widget. The parameter \f2function\f1
if of type \f4PROCESSFN\f1. The parameter \f2data\f1 is a pointer to 
\f4void\f1. To learn more about pre-processing read the \f4cdk_process\f1
manual page.
.RE
 
void setCDKAlphalistPostProcess (CDKALPHALIST *\f2alphalist\f1, PROCESSFN \f2function\f1, void *\f2data\f1);
.RS 3
This function allows the user to have the widget call a function after the
key has been applied to the widget.  The parameter \f2function\f1 if of type
\f4PROCESSFN\f1. The parameter \f2data\f1 is a pointer to \f4void\f1. To
learn more about post-processing read the \f4cdk_process\f1 manual page.
.RE

void bindCDKObject (EObjectType \f2widgetType\f1, void *\f2object\f1, char \f2key\f1, BINDFN \f2function\f1, void *\f2data\f1);
.RS 3
This function allows the user to create special key bindings. The 
\f2widgetType\f1 parameter is a defined type which states what Cdk object 
type is being used. To learn more about the type \f4EObjectType\f1 read 
the \f2cdk_binding\f1 manual page. The \f2object\f1 parameter is the pointer
to the widget object. The \f2key\f1 is the character to bind. The 
\f2function\f1 is the function type. To learn more about the key binding 
call-back function types read the \f4cdk_binding\f1 manual page. The last 
parameter \f2data\f1 is a pointer to any data that needs to get passed to 
the call-back function.
.RE

.SH KEY BINDINGS
When the widget is activated there are several default key bindings which will
help the user enter or manipulate the information quickly. Since this widget is 
built from both the scrolling list widget and the entry field widget, the key
bindings are the same for the respective fields. The extra key bindings are
listed below.
.LP
.nf
\f4Key Bindings\f1
.RS 3
\f2Key          Action\f1
Up Arrow     Scrolls the scrolling list up one line.
Down Arrow   Scrolls the scrolling list down one line.
Page Up      Scrolls the scrolling list up one page.
CTRL-B       Scrolls the scrolling list up one page.
Page Down    Scrolls the scrolling list down one page.
CTRL-F       Scrolls the scrolling list down one page.
Tab          Tries to complete the word in the entry field. 
             If the word segment is not unique then the
             widget will beep and present a list of close
             matches.
Return       Returns the word in the entry field. It also
             sets the structure member \f4exitType\f1 in
             the widget pointer to the value of \f4vNORMAL\f1.
Escape       Exits the widget and returns a \f4NULL\f1 pointer.
             It also sets the structure member \f4exitType\f1
             in the widget pointer to the value of \f4vESCAPE_HIT\f1.
.RE

.fi
.SH SEE ALSO
.BR cdk (3),
.BR cdk_binding (3),
.BR cdk_display (3),
.BR cdk_screen (3)
.SH NOTES
.PP
This widget is created from the scrolling list widget and the entry field 
widget.  This is a good example on how to build your own widgets using the 
base widgets provided in this distribution.
.PP
The header file \f4<cdk.h>\f1 automatically includes the header files
\f4<curses.h>\f1, \f4<stdlib.h>\f1, \f4<string.h>\f1, \f4<ctype.h>\f1,
\f4<unistd.h>\f1, \f4<dirent.h>\f1, \f4<time.h>\f1, \f4<errno.h>\f1,
\f4<pwd.h>\f1, \f4<grp.h>\f1, \f4<sys/stat.h>\f1, and \f4<sys/types.h>\f1.
The \f4<curses.h>\f1 header file includes \f4<stdio.h>\f1 and \f4<unctrl.h>\f1.
.PP
If you have \f4Ncurses\f1 installed on your machine add -DNCURSES to the 
compile line to include the Ncurses header files instead.
