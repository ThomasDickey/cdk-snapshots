'\" t
.\" $Id: cdk_scroll.3,v 1.17 2004/08/27 23:03:32 tom Exp $"
.TH cdk_scroll 3
.SH NAME
activateCDKScroll,
addCDKScrollItem,
deleteCDKScrollItem,
destroyCDKScroll,
drawCDKScroll,
eraseCDKScroll,
getCDKScrollBox,
getCDKScrollHighlight,
getCDKScrollItems,
injectCDKScroll,
moveCDKScroll,
newCDKScroll,
positionCDKScroll,
setCDKScroll,
setCDKScrollBackgroundAttrib,
setCDKScrollBackgroundColor,
setCDKScrollBox,
setCDKScrollBoxAttribute,
setCDKScrollHighlight,
setCDKScrollHorizontalChar,
setCDKScrollItems,
setCDKScrollLLChar,
setCDKScrollLRChar,
setCDKScrollPostProcess,
setCDKScrollPreProcess,
setCDKScrollULChar,
setCDKScrollURChar,
setCDKScrollVerticalChar \- curses scrolling list widget.
.SH SYNOPSIS
.LP
.B cc
.RI "[ " "flag" " \|.\|.\|. ] " "file" " \|.\|.\|."
.B \-lcdk
.RI "[ " "library" " \|.\|.\|. ]"
.LP
#include <cdk.h>
.nf
.TP 15
.B "int activateCDKScroll ("
.BI "CDKSCROLL *" "scroll",
.BI "chtype * " "actions");
.TP 15
.B "void addCDKScrollItem ("
.BI "CDKSCROLL *" "scroll",
.BI "char *" "item");
.TP 15
.B "void deleteCDKScrollItem ("
.BI "CDKSCROLL *" "scroll",
.BI "int " "position");
.TP 15
.B "void destroyCDKScroll ("
.BI "CDKSCROLL *" "scroll");
.TP 15
.B "void drawCDKScroll ("
.BI "CDKSCROLL *" "scroll",
.BI "boolean " "box");
.TP 15
.B "void eraseCDKScroll ("
.BI "CDKSCROLL *" "scroll");
.TP 15
.B "boolean getCDKScrollBox ("
.BI "CDKSCROLL *" "scroll");
.TP 15
.B "chtype getCDKScrollHighlight ("
.BI "CDKSCROLL *" "scroll",
.BI "chtype " "highlight");
.TP 15
.B "int getCDKScrollItems ("
.BI "CDKSCROLL *" "scroll",
.BI "char **" "itemList");
.TP 15
.B "int injectCDKScroll ("
.BI "CDKSCROLL *" "scroll",
.BI "chtype " "input");
.TP 15
.B "void moveCDKScroll ("
.BI "CDKSCROLL *" "scroll",
.BI "int " "xpos",
.BI "int " "ypos",
.BI "boolean " "relative",
.BI "boolean " "refresh");
.TP 15
.B "CDKSCROLL *newCDKScroll ("
.BI "CDKSCREEN *" "cdkscreen",
.BI "int " "xpos",
.BI "int " "ypos",
.BI "int " "spos",
.BI "int " "height",
.BI "int " "width",
.BI "char *" "title",
.BI "char **" "scrollList",
.BI "int " "scrollListLength",
.BI "boolean " "numbers",
.BI "chtype " "highlight",
.BI "boolean " "box",
.BI "boolean " "shadow");
.TP 15
.B "void positionCDKScroll ("
.BI "CDKSCROLL *" "scroll");
.TP 15
.B "void setCDKScroll ("
.BI "CDKSCROLL *" "scroll",
.BI "char *" "value",
.BI "int " "minimumLength",
.BI "int " "maximumLength",
.BI "boolean " "box");
.TP 15
.B "void setCDKScrollBackgroundAttrib ("
.BI "CDKSCROLL *" "scroll",
.BI "chtype " "attribute");
.TP 15
.B "void setCDKScrollBackgroundColor ("
.BI "CDKSCROLL *" "scroll",
.BI "char * " "color");
.TP 15
.B "void setCDKScrollBox ("
.BI "CDKSCROLL *" "scroll",
.BI "boolean " "box");
.TP 15
.B "void setCDKScrollBoxAttribute ("
.BI "CDKSCROLL *" "scroll",
.BI "chtype " "character");
.TP 15
.B "void setCDKScrollHighlight ("
.BI "CDKSCROLL *" "scroll",
.BI "chtype " "highlight");
.TP 15
.B "void setCDKScrollHorizontalChar ("
.BI "CDKSCROLL *" "scroll",
.BI "chtype " "character");
.TP 15
.B "void setCDKScrollItems ("
.BI "CDKSCROLL *" "scroll",
.BI "char **" "itemList",
.BI "int " "listSize",
.BI "boolean " "numbers");
.TP 15
.B "void setCDKScrollLLChar ("
.BI "CDKSCROLL *" "scroll",
.BI "chtype " "character");
.TP 15
.B "void setCDKScrollLRChar ("
.BI "CDKSCROLL *" "scroll",
.BI "chtype " "character");
.TP 15
.B "void setCDKScrollPostProcess ("
.BI "CDKSCROLL *" "scroll",
.BI "PROCESSFN " "callback",
.BI "void * " "data");
.TP 15
.B "void setCDKScrollPreProcess ("
.BI "CDKSCROLL *" "scroll",
.BI "PROCESSFN " "callback",
.BI "void * " "data");
.TP 15
.B "void setCDKScrollULChar ("
.BI "CDKSCROLL *" "scroll",
.BI "chtype " "character");
.TP 15
.B "void setCDKScrollURChar ("
.BI "CDKSCROLL *" "scroll",
.BI "chtype " "character");
.TP 15
.B "void setCDKScrollVerticalChar ("
.BI "CDKSCROLL *" "scroll",
.BI "chtype " "character");
.fi
.SH DESCRIPTION
The Cdk scroll widget creates a scrolling list.
The following are functions
which create or manipulate the Cdk scrolling list widget.
.SH AVAILABLE FUNCTIONS
.TP 5
.B activateCDKScroll
activates the scroll widget and lets the user interact with the widget.
The parameter \fBscroll\fR is a pointer to a non-NULL scroll widget.
If the \fBactions\fR parameter is passed with a non-NULL value, the characters
in the array will be injected into the widget.
To activate the widget
interactively pass in a \fINULL\fR pointer for \fBactions\fR.
If the character entered
into this widget is \fIRETURN\fR or \fITAB\fR then this function will return a
value from 0 to the number of items-1, representing the item selected.
It will also set the widget data \fIexitType\fR to \fIvNORMAL\fR.
If the
character entered into this widget was \fIESCAPE\fR then the widget will return
a value of -1 and the widget data \fIexitType\fR will be set to \fIvESCAPE_HIT\fR.
.TP 5
.B addCDKScrollItem
allows the user to add an item into an existing scrolling list.
The \fBscroll\fR parameter is a pointer to the scrolling list to add the
item to.
The parameter \fBitem\fR is a \fIchar *\fR representing the new item
to add.
The item is always added to the end of the list.
.TP 5
.B deleteCDKScrollItem
allows the user to add an item into an existing scrolling list.
The \fBscroll\fR parameter is a pointer to the scrolling list to add the
item to.
The parameter \fBf2position\fR is an \fIint\fR which specifies which
element to remove.
.TP 5
.B destroyCDKScroll
removes the widget from the screen and frees memory the object used.
.TP 5
.B drawCDKScroll
draws the scroll widget on the screen.
If the \fBbox\fR option is true, the widget is drawn with a box.
.TP 5
.B eraseCDKScroll
removes the widget from the screen.
This does \fINOT\fR destroy the widget.
.TP 5
.B getCDKScrollBox
returns true if the widget will be drawn with a box around it.
.TP 5
.B getCDKScrollHighlight
returns the attribute of the highlight bar.
.TP 5
.B getCDKScrollItems
fills the parameter \fBitemList\fR with the contents of the scrolling list.
It returns the number of elements in the scrolling list.
.TP 5
.B injectCDKScroll
injects a single character into the widget.
The parameter \fBscroll\fR is a pointer to a non-NULL scroll widget.
The parameter \fBcharacter\fR is the character to inject into the widget.
The return value and side-effect (setting the widget data \fIexitType\fP)
depend upon the injected character:
.RS
.TP
\fIRETURN\fP or \fITAB\fR
the function returns
a value ranging from zero to one less than the number of items,
representing the item selected.
The widget data \fIexitType\fR is set to \fIvNORMAL\fR.
.TP
\fIESCAPE\fP
the function returns
-1.
The widget data \fIexitType\fR is set to \fIvESCAPE_HIT\fR.
.TP
Otherwise
unless modified by preprocessing, postprocessing or key bindings,
the function returns
-1.
The widget data \fIexitType\fR is set to \fIvEARLY_EXIT\fR.
.RE
.TP 5
.B moveCDKScroll
moves the given widget to the given position.
The parameters \fBxpos\fR and \fBypos\fR are the new position of the widget.
The parameter \fBxpos\fR may be an integer or one of the pre-defined values
\fITOP\fR, \fIBOTTOM\fR, and \fICENTER\fR.
The parameter \fBypos\fR may be an integer or one of the pre-defined values \fILEFT\fR,
\fIRIGHT\fR, and \fICENTER\fR.
The parameter \fBrelative\fR states whether
the \fBxpos\fR/\fBypos\fR pair is a relative move or an absolute move.
For example, if \fBxpos\fR = 1 and \fBypos\fR = 2 and \fBrelative\fR = \fBTRUE\fR,
then the widget would move one row down and two columns right.
If the value of \fBrelative\fR was \fBFALSE\fR then the widget would move to the position (1,2).
Do not use the values \fITOP\fR, \fIBOTTOM\fR, \fILEFT\fR,
\fIRIGHT\fR, or \fICENTER\fR when \fBrelative\fR = \fITRUE\fR.
(weird things may happen).
The final parameter \fBrefresh\fR is a boolean value which states
whether the widget will get refreshed after the move.
.TP 5
.B newCDKScroll
creates a scroll widget and returns a pointer to it.
The \fBscreen\fR parameter
is the screen you wish this widget to be placed in.
The parameter \fBxpos\fR
controls the placement of the object along the horizontal axis.
This parameter
may be an integer or one of the pre-defined values \fILEFT\fR,
\fIRIGHT\fR, and \fICENTER\fR.
The parameter \fBypos\fR controls the placement
of the object along the vertical axis.
This parameter may be an integer
value or one of the pre-defined values \fITOP\fR, \fIBOTTOM\fR, and \fICENTER\fR.
The parameter \fBspos\fR is where the scroll bar is to be placed.
This may be one of three values: \fILEFT\fR, which puts the scroll bar on the left
of the scrolling list.
\fIRIGHT\fR which puts the scroll bar on the right side
of the list, and \fINONE\fR which does not add a scroll bar.
The parameters \fBheight\fR and \fBwidth\fR control the height and width of the widget.
If you provide a value of zero for either of the height or the width, the widget will
be created with the full width and height of the screen.
If you provide a negative
value, the widget will be created the full height or width minus the value provided.
The \fBtitle\fR parameter is the string which will be displayed
at the top of the widget.
The title can be more than one line; just provide a
carriage return character at the line break.
The parameter \fBscrollList\fR is
the list of items to be displayed in the scrolling list; \fBscrollListLength\fR
is the number of elements in the given list.
The parameter \fBnumbers\fR is a
boolean value stating that you want the items in the list to have a number
attached to the front of the list items.
The \fBhighlight\fR parameter specifies
the display attribute of the currently selected item.
The \fBbox\fR parameter
states whether the widget will be drawn with a box around it.
The \fBshadow\fR
parameter accepts a boolean value to turn the shadow on or off around this widget.
If the widget could not be created then a \fINULL\fR pointer is returned.
.TP 5
.B positionCDKScroll
allows the user to move the widget around the screen via the cursor/keypad keys.
See \fBcdk_position (3)\fR for key bindings.
.TP 5
.B setCDKScroll
lets the programmer modify certain elements of an existing
scroll widget.
The parameter names correspond to the same parameter names listed
in the \fInewCDKScroll\fR function.
.TP 5
.B setCDKScrollBackgroundAttrib
sets the background attribute of the widget.
The parameter \fBattribute\fR is a curses attribute, e.g., A_BOLD.
.TP 5
.B setCDKScrollBackgroundColor
sets the background color of the widget.
The parameter \fBcolor\fR
is in the format of the Cdk format strings.
See \fBcdk_display (3)\fR.
.TP 5
.B setCDKScrollBox
sets whether the widget will be drawn with a box around it.
.TP 5
.B setCDKScrollBoxAttribute
sets the attribute of the box.
.TP 5
.B setCDKScrollHighlight
sets the attribute of the highlight bar.
.TP 5
.B setCDKScrollHorizontalChar
sets the horizontal drawing character for the box to
the given character.
.TP 5
.B setCDKScrollItems
sets the contents of the scrolling list.
.TP 5
.B setCDKScrollLLChar
sets the lower left hand corner of the widget's box to
the given character.
.TP 5
.B setCDKScrollLRChar
sets the lower right hand corner of the widget's box to
the given character.
.TP 5
.B setCDKScrollPostProcess
allows the user to have the widget call a function after the
key has been applied to the widget.
The parameter \fBfunction\fR is the callback function.
The parameter \fBdata\fR points to data passed to the callback function.
To learn more about post-processing see \fIcdk_process (3)\fR.
.TP 5
.B setCDKScrollPreProcess
allows the user to have the widget call a function after a key
is hit and before the key is applied to the widget.
The parameter \fBfunction\fR is the callback function.
The parameter \fBdata\fR points to data passed to the callback function.
To learn more about pre-processing see \fIcdk_process (3)\fR.
.TP 5
.B setCDKScrollULChar
sets the upper left hand corner of the widget's box to
the given character.
.TP 5
.B setCDKScrollURChar
sets the upper right hand corner of the widget's box to
the given character.
.TP 5
.B setCDKScrollVerticalChar
sets the vertical drawing character for the box to
the given character.
.SH KEY BINDINGS
When the widget is activated there are several default key bindings which will
help the user enter or manipulate the information quickly.
The following table
outlines the keys and their actions for this widget.
.LP
.TS
center tab(/) allbox;
l l
l l
lw15 lw35 .
\fBKey/Action\fR
=
Left Arrow/Shifts the list left one column.
Right Arrow/Shifts the list right one column.
Up Arrow/Selects the next item up in the list.
Down Arrow/Selects the next item down in the list.
Prev Page/Moves one page backwards.
Ctrl-B/Moves one page backwards.
Next Page/Moves one page forwards.
Ctrl-F/Moves one page forwards.
g/Moves to the first element in the list.
1/Moves to the first element in the list.
G/Moves to the last element in the list.
$/Shifts the list to the far right.
|/Shifts the list to the far left.
Return/T{
Exits the widget and returns the index of the selected item.
This also sets the widget data \fIexitType\fR to \fIvNORMAL\fR.
T}
Tab/T{
Exits the widget and returns the index of the selected item.
This also sets the widget data \fIexitType\fR to \fIvNORMAL\fR.
T}
Escape/T{
Exits the widget and returns -1.
This also sets the widget data \fIexitType\fR to \fIvESCAPE_HIT\fR.
T}
Ctrl-L/Refreshes the screen.
.TE
.SH SEE ALSO
.BR cdk (3),
.BR cdk_binding (3),
.BR cdk_display (3),
.BR cdk_position (3),
.BR cdk_screen (3)
